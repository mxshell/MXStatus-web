{"version":3,"sources":["components/CopyableText.js","components/SingleIP.js","components/InfoInterfaces.js","components/DisplayPercent.js","components/DisplayTemp.js","components/DisplayRAM.js","utils/DataColor.js","components/GpuCard.js","components/UserBadge.js","components/UsersLine.js","components/InfoCPU.js","components/GcpCard.js","components/MachineCard.js","components/PageMain.js","components/Footer.js","App.js","reportWebVitals.js","index.js"],"names":["CopyableText","_ref","children","className","style","showCopyIcon","maxLength","copied","setCopied","useState","isHovered","setIsHovered","_jsxs","_objectSpread","cursor","userSelect","position","transition","color","textShadow","onClick","async","navigator","clipboard","writeText","setTimeout","err","console","error","onMouseEnter","onMouseLeave","title","length","concat","substring","_jsx","marginLeft","fontSize","opacity","SingleIP","props","display","alignItems","margin","padding","borderRadius","fontFamily","border","borderRight","backgroundColor","name","ip","defaultProps","InfoInterfaces","marginBottom","flexWrap","gap","fontWeight","data","map","index","marginTop","mac_address","DisplayPercent","percent","toFixed","DisplayTemp","temp","warningTemp","dangerTemp","DisplayRAM","ram","getUtilizationColor","getTemperatureColor","GpuCard","overflow","borderBottom","paddingBottom","width","height","boxShadow","maxWidth","textOverflow","whiteSpace","gpu_name","borderColor","temperature","gpu_usage","memory_usage","memory_total","memory_free","UserBadge","getBadgeStyle","baseStyle","letterSpacing","lineHeight","online","UsersLine","users_info","online_users","offline_users","all_users","InfoCPU","cpu_model","cpu_usage","cpu_cores","ram_usage","ram_free","ram_total","ramUsed","ramPercent","GcpCard","process","handleInteractiveClick","secondsToShortString","singleLine","backgroundImage","flexDirection","minHeight","top","left","right","pid","gpu_index","user","flexShrink","proc_uptime","command","flex","wordBreak","MachineCard","showDetails","SetShowDetails","showGPUs","SetShowGPUs","showActiveGCP","SetShowActiveGCP","isHiding","setIsHiding","isEmpty","s","undefined","numItems","x","Number","d","Math","floor","h","m","isOnline","v","created_at","now","Date","String","replace","trim","handleShowDetails","state","e","stopPropagation","handleHideWithAnimation","onHide","getStatusColor","borderLeft","justifyContent","marginRight","gpu_status","gpu_compute_processes","background","_Fragment","alignSelf","outline","onMouseOver","currentTarget","onMouseOut","tabIndex","onKeyPress","key","getTimestamp","options","year","month","day","hour","minute","second","toLocaleTimeString","uptime_str","hostname","architecture","linux_distro","machine_id","paddingTop","ipv4s","gpu_data","idx","borderTop","DEFAULT_API_ROOT","LOCALE_CONFIG","REFRESH_INTERVALS","STORAGE_KEYS","DYNAMIC","DYNAMIC_INTERVAL","OPTION_A_CHECKED","OPTION_B_CHECKED","OPTION_C_CHECKED","VIEW_KEY","HIDDEN_MACHINE_IDS","CODE_SNIPPETS","getFromStorage","defaultValue","item","localStorage","getItem","JSON","parse","setToStorage","value","setItem","stringify","CodeFlowBackground","lines","Array","from","_","i","n","random","line","j","zIndex","pointerEvents","animation","animationDelay","LoadingAnimation","ErrorMessage","onRetry","textAlign","borderWidth","textTransform","target","PageMain","dataSnapshot","setDataSnapshot","isLoading","setIsLoading","loadingStartTime","setLoadingStartTime","showContent","setShowContent","setError","apiRoot","setApiRoot","serverMode","setServerMode","pendingServer","setPendingServer","pendingViewKey","setPendingViewKey","welcomeError","setWelcomeError","dynamicInterval","setDynamicInterval","dynamic","setDynamic","optionAChecked","setOptionAChecked","optionBChecked","setOptionBChecked","optionCChecked","setOptionCChecked","viewKey","setViewKey","hiddenMachineIds","setHiddenMachineIds","_unused","showAllMachines","setShowAllMachines","getData","customRoot","customKey","config","method","url","headers","params","view_key","axios","then","response","status","isArray","catch","request","handleRefresh","resetToDefaults","Object","values","forEach","removeItem","handleDynamicOptions","showRadioCheck","intValue","parseInt","log","toggleDynamic","handleShowAllMachines","handleHideOfflineMachines","offlineIds","filter","machineData","isMachineOnline","ids","Set","handleWelcomeEnter","serverToTest","keyToTest","test","loadingStart","elapsed","finish","msg","code","filteredMachines","machine","includes","useEffect","elapsedTime","minimumLoadingTime","useInterval","callback","delay","savedCallback","useRef","current","id","setInterval","clearInterval","boxSizing","src","alt","minWidth","type","checked","onChange","htmlFor","placeholder","autoFocus","onKeyDown","disabled","toLocaleString","onFocus","onBlur","accentColor","hideMachine","Footer","currentYear","getFullYear","href","rel","textDecoration","borderBottomColor","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","React","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e6c07dc0.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport PropTypes from 'prop-types'\n\nconst CopyableText = ({ children, className, style, showCopyIcon = true, maxLength }) => {\n    const [copied, setCopied] = useState(false)\n    const [isHovered, setIsHovered] = useState(false)\n\n    const handleClick = async () => {\n        try {\n            // Always copy the full text, not the truncated display text\n            await navigator.clipboard.writeText(children)\n            setCopied(true)\n\n            // Reset the copied state after 2 seconds\n            setTimeout(() => {\n                setCopied(false)\n            }, 2000)\n        } catch (err) {\n            console.error('Failed to copy text: ', err)\n        }\n    }\n\n    const getDisplayText = () => {\n        if (maxLength && children.length > maxLength) {\n            return children.substring(0, maxLength) + '...'\n        }\n        return children\n    }\n\n    const getCopyIcon = () => {\n        if (copied) {\n            return (\n                <span style={{\n                    color: 'var(--hacker-success)',\n                    marginLeft: '0.3rem',\n                    fontSize: '0.7rem',\n                    opacity: 1,\n                    transition: 'opacity 0.2s ease'\n                }}>\n                    ✓\n                </span>\n            )\n        }\n\n        if (showCopyIcon && isHovered) {\n            return (\n                <span style={{\n                    color: 'var(--hacker-text-accent)',\n                    marginLeft: '0.3rem',\n                    fontSize: '0.7rem',\n                    opacity: 0.7,\n                    transition: 'opacity 0.2s ease'\n                }}>\n                    copy\n                </span>\n            )\n        }\n\n        return null\n    }\n\n    return (\n        <span\n            className={className}\n            style={{\n                ...style,\n                cursor: 'pointer',\n                userSelect: 'text',\n                position: 'relative',\n                transition: 'all 0.2s ease',\n                ...(isHovered && {\n                    color: 'var(--hacker-text-accent)',\n                    textShadow: '0 0 4px var(--hacker-text-accent)'\n                }),\n                ...(copied && {\n                    color: 'var(--hacker-success)',\n                    textShadow: '0 0 6px var(--hacker-success)'\n                })\n            }}\n            onClick={handleClick}\n            onMouseEnter={() => setIsHovered(true)}\n            onMouseLeave={() => setIsHovered(false)}\n            title={copied ? \"Copied!\" : maxLength && children.length > maxLength ? `Click to copy full command (${children.length} chars)` : \"Click to copy\"}\n        >\n            {getDisplayText()}\n            {getCopyIcon()}\n        </span>\n    )\n}\n\nCopyableText.propTypes = {\n    children: PropTypes.string.isRequired,\n    className: PropTypes.string,\n    style: PropTypes.object,\n    showCopyIcon: PropTypes.bool,\n    maxLength: PropTypes.number\n}\n\nexport default CopyableText ","import React from 'react'\nimport PropTypes from 'prop-types'\nimport CopyableText from './CopyableText'\n\nconst SingleIP = props => {\n    return (\n        <div style={{\n            display: 'inline-flex',\n            alignItems: 'center',\n            margin: '0 0.25rem'\n        }}>\n            <CopyableText style={{\n                padding: '0.2rem 0.45rem',\n                borderRadius: '0.25rem 0 0 0.25rem',\n                fontSize: '0.75rem',\n                fontFamily: 'var(--hacker-font-mono)',\n                color: 'var(--hacker-text-secondary)',\n                border: '1px solid var(--hacker-border)',\n                borderRight: 'none',\n                backgroundColor: 'var(--hacker-surface)',\n                userSelect: 'all',\n                cursor: 'pointer',\n                transition: 'var(--hacker-transition)'\n            }} onClick={props.onClick}>\n                {props.name}\n            </CopyableText>\n            <CopyableText style={{\n                padding: '0.2rem 0.45rem',\n                borderRadius: '0 0.25rem 0.25rem 0',\n                fontSize: '0.75rem',\n                fontFamily: 'var(--hacker-font-mono)',\n                color: 'var(--hacker-info)',\n                border: '1px solid var(--hacker-info)',\n                backgroundColor: 'rgba(0, 128, 255, 0.1)',\n                userSelect: 'all',\n                cursor: 'pointer',\n                transition: 'var(--hacker-transition)'\n            }} onClick={props.onClick}>\n                {props.ip}\n            </CopyableText>\n        </div>\n    )\n}\n\nSingleIP.propTypes = {\n    \"name\": PropTypes.string,\n    \"ip\": PropTypes.string,\n    \"onClick\": PropTypes.func\n}\n\nSingleIP.defaultProps = {\n    \"name\": \"xx\",\n    \"ip\": \"xxx.xxx.xxx.xxx\",\n    \"onClick\": () => { }\n}\n\nexport default SingleIP\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport SingleIP from './SingleIP'\nimport CopyableText from './CopyableText'\n\nconst InfoInterfaces = props => {\n    return (\n        <div style={{\n            marginBottom: '0.75rem',\n            padding: '0.75rem',\n            border: '1px solid var(--hacker-border)',\n            borderRadius: '0.5rem',\n            backgroundColor: 'var(--hacker-surface)'\n        }}>\n            <div style={{\n                display: 'flex',\n                flexWrap: 'wrap',\n                alignItems: 'center',\n                gap: '0.4rem'\n            }}>\n                <span style={{\n                    color: 'var(--hacker-text-secondary)',\n                    fontSize: '0.8rem',\n                    fontWeight: '500'\n                }}>\n                    Interfaces:\n                </span>\n                {props.data.map((ip, index) => {\n                    if (ip[0] === 'lo' || ip[0] === 'docker0' || ip[0] === 'tailscale0') {\n                        return null;\n                    }\n                    else {\n                        return (\n                            <SingleIP key={index} name={ip[0]} ip={ip[1]} onClick={props.onClick} />\n                        )\n                    }\n                })}\n            </div>\n\n            <div style={{\n                marginTop: '0.4rem',\n                display: 'flex',\n                flexWrap: 'wrap',\n                alignItems: 'center',\n                gap: '0.4rem'\n            }}>\n                <span style={{\n                    color: 'var(--hacker-text-secondary)',\n                    fontSize: '0.8rem',\n                    fontWeight: '500'\n                }}>\n                    MAC Addresses:\n                </span>\n                <CopyableText className=\"hacker-badge\" style={{ fontSize: '0.8rem', fontWeight: '500', color: 'var(--hacker-text-secondary)' }}>{props.mac_address}</CopyableText>\n            </div>\n        </div>\n    )\n}\n\nInfoInterfaces.propTypes = {\n    data: PropTypes.array,\n    mac_address: PropTypes.string,\n    onClick: PropTypes.func\n}\n\nInfoInterfaces.defaultProps = {\n    data: [],\n    mac_address: '',\n    onClick: () => { }\n}\n\nexport default InfoInterfaces\n","import React from 'react'\n\nconst DisplayPercent = (props) => {\n    const getUtilizationColor = (percent) => {\n        if (percent < 0.5) return 'var(--hacker-info)'\n        if (percent < 0.9) return 'var(--hacker-warning)'\n        if (percent >= 0.9 && percent <= 1.0) return 'var(--hacker-danger)'\n        return \"var(--hacker-text-secondary)\"\n    }\n\n    return (\n        <span style={{ color: getUtilizationColor(props.percent) }}>\n            {(props.percent * 100).toFixed(1)}%\n        </span>\n    )\n}\n\nexport default DisplayPercent\n","import React from 'react'\n\nconst DisplayTemp = (props) => {\n    const getColor = () => {\n        if (props.temp < props.warningTemp) {\n            return \"var(--hacker-info)\"\n        } else if (props.temp >= props.warningTemp && props.temp < props.dangerTemp) {\n            return \"var(--hacker-warning)\"\n        } else if (props.temp >= props.dangerTemp) {\n            return \"var(--hacker-danger)\"\n        } else {\n            return \"var(--hacker-text-secondary)\"\n        }\n    }\n\n    return (\n        <span style={{ color: getColor() }}>\n            {props.temp}°C\n        </span>\n    )\n}\n\nDisplayTemp.defaultProps = {\n    \"temp\": 0.0,\n    \"warningTemp\": 80,\n    \"dangerTemp\": 85,\n}\n\nexport default DisplayTemp\n","import React from 'react'\n\nconst DisplayRAM = (props) => {\n    return (\n        <span style={{ color: 'var(--hacker-text-secondary)' }}>\n            {(props.ram / 1024).toFixed(1)} GB\n        </span>\n    )\n}\n\nexport default DisplayRAM\n","\nconst getUtilizationColor = (percent) => {\n    if (percent < 0.5) return 'var(--hacker-info)'\n    if (percent < 0.9) return 'var(--hacker-warning)'\n    if (percent >= 0.9 && percent <= 1.0) return 'var(--hacker-danger)'\n    return \"var(--hacker-text-secondary)\"\n}\n\nconst getTemperatureColor = temp => {\n    if (temp < 70) return \"var(--hacker-info)\";\n    if (temp < 85) return \"var(--hacker-warning)\";\n    if (temp >= 85) return \"var(--hacker-danger)\";\n    return \"var(--hacker-text-secondary)\";\n};\n\n\nexport { getUtilizationColor, getTemperatureColor }","import React from 'react'\nimport PropTypes from 'prop-types'\nimport DisplayPercent from './DisplayPercent'\nimport DisplayTemp from './DisplayTemp'\nimport DisplayRAM from './DisplayRAM'\nimport CopyableText from './CopyableText'\nimport { getUtilizationColor, getTemperatureColor } from '../utils/DataColor'\n\nconst GpuCard = props => {\n\n    return (\n        <div className=\"hacker-card\" style={{\n            marginBottom: '0.75rem',\n            border: '1px solid var(--hacker-border)',\n            backgroundColor: 'var(--hacker-surface)',\n            position: 'relative',\n            overflow: 'hidden'\n        }}>\n            {/* GPU Header */}\n            <div className=\"gpu-header d-flex align-items-center justify-content-between mb-2\" style={{\n                borderBottom: '1px solid var(--hacker-border)',\n                paddingBottom: '0.5rem'\n            }}>\n                <div className=\"d-flex align-items-center gap-2\">\n                    <div className=\"pulse\" style={{\n                        width: '8px',\n                        height: '8px',\n                        borderRadius: '50%',\n                        backgroundColor: 'var(--hacker-info)',\n                        boxShadow: `0 0 8px var(--hacker-info)`\n                        // boxShadow: `0 0 8px ${'var(--hacker-info)'}`\n                    }}></div>\n                    <span style={{\n                        color: 'var(--hacker-info)',\n                        fontSize: '0.85rem',\n                        fontWeight: '600'\n                    }}>\n                        GPU {props.data.index}\n                    </span>\n                    <CopyableText className=\"hacker-badge\" style={{\n                        fontSize: '0.7rem',\n                        maxWidth: '200px',\n                        overflow: 'hidden',\n                        textOverflow: 'ellipsis',\n                        whiteSpace: 'nowrap',\n                        // color: 'var(--hacker-text-accent)'\n                    }}>\n                        {/* {props.data.gpu_name} ({<DisplayRAM ram={props.data.memory_total} />}) */}\n                        {props.data.gpu_name}\n                    </CopyableText>\n                    {/* <CopyableText className=\"hacker-badge\" style={{\n                        fontSize: '0.7rem',\n                        maxWidth: '200px',\n                        overflow: 'hidden',\n                        textOverflow: 'ellipsis',\n                        whiteSpace: 'nowrap'\n                    }}>\n                        {<DisplayRAM ram={props.data.memory_total} />}\n                    </CopyableText> */}\n                </div>\n\n                <div className=\"d-flex align-items-center gap-2\">\n                    <span className=\"hacker-badge\" style={{\n                        borderColor: getTemperatureColor(props.data.temperature),\n                        color: getTemperatureColor(props.data.temperature),\n                        fontSize: '0.7rem'\n                    }}>\n                        <DisplayTemp temp={props.data.temperature} />\n                    </span>\n                </div>\n            </div>\n\n            {/* GPU Metrics Grid */}\n            <div className=\"gpu-metrics\">\n                {/* Core Utilization */}\n                <div className=\"metric-row mb-2\">\n                    <div className=\"d-flex justify-content-between align-items-center mb-1\">\n                        <span style={{\n                            color: 'var(--hacker-text-secondary)',\n                            fontSize: '0.75rem',\n                            fontWeight: '500'\n                        }}>\n                            Core Utilization\n                        </span>\n                        <span style={{\n                            color: getUtilizationColor(props.data.gpu_usage),\n                            fontSize: '0.75rem',\n                            fontWeight: '600'\n                        }}>\n                            <DisplayPercent percent={props.data.gpu_usage} />\n                        </span>\n                    </div>\n                    <div style={{\n                        width: '100%',\n                        height: '6px',\n                        backgroundColor: 'var(--hacker-border)',\n                        borderRadius: '3px',\n                        overflow: 'hidden'\n                    }}>\n                        <div style={{\n                            width: `${props.data.gpu_usage * 100}%`,\n                            height: '100%',\n                            backgroundColor: getUtilizationColor(props.data.gpu_usage),\n                            borderRadius: '3px',\n                            transition: 'width 0.3s ease'\n                        }}></div>\n                    </div>\n                </div>\n\n                {/* Memory Utilization */}\n                <div className=\"metric-row mb-2\">\n                    <div className=\"d-flex justify-content-between align-items-center mb-1\">\n                        <span style={{\n                            color: 'var(--hacker-text-secondary)',\n                            fontSize: '0.75rem',\n                            fontWeight: '500'\n                        }}>\n                            Memory Utilization\n                        </span>\n                        <span style={{\n                            color: getUtilizationColor(props.data.memory_usage),\n                            fontSize: '0.75rem',\n                            fontWeight: '600'\n                        }}>\n                            <DisplayPercent percent={props.data.memory_usage} />\n                        </span>\n                    </div>\n                    <div style={{\n                        width: '100%',\n                        height: '6px',\n                        backgroundColor: 'var(--hacker-border)',\n                        borderRadius: '3px',\n                        overflow: 'hidden'\n                    }}>\n                        <div style={{\n                            width: `${props.data.memory_usage * 100}%`,\n                            height: '100%',\n                            backgroundColor: getUtilizationColor(props.data.memory_usage),\n                            borderRadius: '3px',\n                            transition: 'width 0.3s ease'\n                        }}></div>\n                    </div>\n                </div>\n\n                {/* Memory Details */}\n                {/* <div className=\"memory-details\" style={{\n                    display: 'grid',\n                    gridTemplateColumns: '1fr 1fr',\n                    gap: '0.5rem',\n                    padding: '0.5rem',\n                    backgroundColor: 'var(--hacker-bg)',\n                    borderRadius: '0.25rem',\n                    border: '1px solid var(--hacker-border)'\n                }}>\n                    <div className=\"memory-item\">\n                        <div style={{\n                            color: 'var(--hacker-text-secondary)',\n                            fontSize: '0.65rem',\n                            marginBottom: '0.2rem'\n                        }}>\n                            Used\n                        </div>\n                        <div style={{\n                            color: 'var(--hacker-success)',\n                            fontSize: '0.7rem',\n                            fontWeight: '600'\n                        }}>\n                            <DisplayRAM ram={props.data.memory_total - props.data.memory_free} />\n                        </div>\n                    </div>\n                    <div className=\"memory-item\">\n                        <div style={{\n                            color: 'var(--hacker-text-secondary)',\n                            fontSize: '0.65rem',\n                            marginBottom: '0.2rem'\n                        }}>\n                            Free\n                        </div>\n                        <div style={{\n                            color: 'var(--hacker-info)',\n                            fontSize: '0.7rem',\n                            fontWeight: '600'\n                        }}>\n                            <DisplayRAM ram={props.data.memory_free} />\n                        </div>\n                    </div>\n                    <div className=\"memory-item\">\n                        <div style={{\n                            color: 'var(--hacker-text-secondary)',\n                            fontSize: '0.65rem',\n                            marginBottom: '0.2rem'\n                        }}>\n                            Total\n                        </div>\n                        <div style={{\n                            color: 'var(--hacker-text-primary)',\n                            fontSize: '0.7rem',\n                            fontWeight: '600'\n                        }}>\n                            <DisplayRAM ram={props.data.memory_total} />\n                        </div>\n                    </div>\n                </div> */}\n\n                {/* Performance Indicators */}\n                <div className=\"performance-indicators mt-2\" style={{\n                    display: 'flex',\n                    gap: '0.5rem',\n                    flexWrap: 'wrap'\n                }}>\n                    <div className=\"indicator\" style={{\n                        padding: '0.3rem 0.5rem',\n                        backgroundColor: 'var(--hacker-bg)',\n                        border: '1px solid var(--hacker-border)',\n                        borderRadius: '0.25rem',\n                        fontSize: '0.65rem'\n                    }}>\n                        <div style={{ color: 'var(--hacker-text-secondary)' }}>Total</div>\n                        <div style={{\n                            color: getUtilizationColor(props.data.gpu_usage),\n                            fontWeight: '600'\n                        }}>\n                            <DisplayRAM ram={props.data.memory_total} />\n                        </div>\n                    </div>\n                    <div className=\"indicator\" style={{\n                        padding: '0.3rem 0.5rem',\n                        backgroundColor: 'var(--hacker-bg)',\n                        border: '1px solid var(--hacker-border)',\n                        borderRadius: '0.25rem',\n                        fontSize: '0.65rem'\n                    }}>\n                        <div style={{ color: 'var(--hacker-text-secondary)' }}>Free</div>\n                        <div style={{\n                            color: getUtilizationColor(props.data.gpu_usage),\n                            fontWeight: '600'\n                        }}>\n                            <DisplayRAM ram={props.data.memory_free} />\n                        </div>\n                    </div>\n                    <div className=\"indicator\" style={{\n                        padding: '0.3rem 0.5rem',\n                        backgroundColor: 'var(--hacker-bg)',\n                        border: '1px solid var(--hacker-border)',\n                        borderRadius: '0.25rem',\n                        fontSize: '0.65rem'\n                    }}>\n                        <div style={{ color: 'var(--hacker-text-secondary)' }}>Used</div>\n                        <div style={{\n                            color: getUtilizationColor(props.data.gpu_usage),\n                            fontWeight: '600'\n                        }}>\n                            <DisplayRAM ram={props.data.memory_total - props.data.memory_free} />\n                        </div>\n                    </div>\n                    {/* <div className=\"indicator\" style={{\n                        padding: '0.3rem 0.5rem',\n                        backgroundColor: 'var(--hacker-bg)',\n                        border: '1px solid var(--hacker-border)',\n                        borderRadius: '0.25rem',\n                        fontSize: '0.65rem'\n                    }}>\n                        <div style={{ color: 'var(--hacker-text-secondary)' }}>Core</div>\n                        <div style={{\n                            color: getUtilizationColor(props.data.gpu_usage),\n                            fontWeight: '600'\n                        }}>\n                            {(props.data.gpu_usage * 100).toFixed(0)}%\n                        </div>\n                    </div> */}\n                    {/* <div className=\"indicator\" style={{\n                        padding: '0.3rem 0.5rem',\n                        backgroundColor: 'var(--hacker-bg)',\n                        border: '1px solid var(--hacker-border)',\n                        borderRadius: '0.25rem',\n                        fontSize: '0.65rem'\n                    }}>\n                        <div style={{ color: 'var(--hacker-text-secondary)' }}>Memory</div>\n                        <div style={{\n                            color: getMemoryColor(props.data.memory_usage),\n                            fontWeight: '600'\n                        }}>\n                            {(props.data.memory_usage * 100).toFixed(0)}%\n                        </div>\n                    </div> */}\n                    {/* <div className=\"indicator\" style={{\n                        padding: '0.3rem 0.5rem',\n                        backgroundColor: 'var(--hacker-bg)',\n                        border: '1px solid var(--hacker-border)',\n                        borderRadius: '0.25rem',\n                        fontSize: '0.65rem'\n                    }}>\n                        <div style={{ color: 'var(--hacker-text-secondary)' }}>Temp</div>\n                        <div style={{\n                            color: getTemperatureColor(props.data.temperature),\n                            fontWeight: '600'\n                        }}>\n                            {props.data.temperature}°C\n                        </div>\n                    </div> */}\n                </div>\n            </div>\n        </div>\n    )\n}\n\nGpuCard.propTypes = {\n    \"data\": PropTypes.object\n}\n\nGpuCard.defaultProps = {\n    \"data\": {\n        \"index\": 0,\n        \"gpu_name\": \"GeForce RTX xxxx xx\",\n        \"gpu_usage\": 0.0,\n        \"temperature\": 0.0,\n        \"memory_total\": 0.0,\n        \"memory_free\": 0.0,\n        \"memory_usage\": 0.0,\n    }\n}\n\nexport default GpuCard\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst UserBadge = props => {\n    const getBadgeStyle = () => {\n        const baseStyle = {\n            padding: '0.15rem 0.35rem',\n            borderRadius: '1rem',\n            fontSize: '0.7rem',\n            fontFamily: 'var(--hacker-font-mono)',\n            border: '1px solid',\n            transition: 'var(--hacker-transition)',\n            display: 'inline-block',\n            margin: '0 0.15rem',\n            fontWeight: '600',\n            letterSpacing: '0.02em',\n            lineHeight: '1.2'\n        }\n\n        if (props.online) {\n            return {\n                ...baseStyle,\n                color: 'var(--hacker-info)',\n                borderColor: 'var(--hacker-info)',\n                backgroundColor: 'rgba(0, 123, 255, 0.1)'\n            }\n        } else {\n            return {\n                ...baseStyle,\n                color: 'var(--hacker-text-secondary)',\n                borderColor: 'var(--hacker-border)',\n                backgroundColor: 'var(--hacker-surface)'\n            }\n        }\n    }\n\n    return (\n        <span style={getBadgeStyle()}>\n            {props.name}\n        </span>\n    )\n}\n\nUserBadge.propTypes = {\n    name: PropTypes.string,\n    online: PropTypes.bool,\n}\n\nexport default UserBadge\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport UserBadge from './UserBadge'\n\nconst UsersLine = props => {\n    return (\n        <div style={{\n            marginBottom: '0.75rem',\n            padding: '0.75rem',\n            border: '1px solid var(--hacker-border)',\n            borderRadius: '0.5rem',\n            backgroundColor: 'var(--hacker-surface)'\n        }}>\n            <div style={{\n                display: 'flex',\n                flexWrap: 'wrap',\n                alignItems: 'center',\n                gap: '0.4rem',\n                marginBottom: '0.4rem'\n            }}>\n                <span style={{\n                    color: 'var(--hacker-text-secondary)',\n                    fontSize: '0.8rem',\n                    fontWeight: '500'\n                }}>\n                    Online:\n                </span>\n                {props.users_info.online_users.map((name, index) =>\n                    <UserBadge key={index} name={name} online={true} />\n                )}\n            </div>\n\n            <div style={{\n                display: 'flex',\n                flexWrap: 'wrap',\n                alignItems: 'center',\n                gap: '0.4rem'\n            }}>\n                <span style={{\n                    color: 'var(--hacker-text-secondary)',\n                    fontSize: '0.8rem',\n                    fontWeight: '500'\n                }}>\n                    Offline:\n                </span>\n                {props.users_info.offline_users.map((name, index) =>\n                    <UserBadge key={index} name={name} online={false} />\n                )}\n            </div>\n        </div>\n    )\n}\n\nUsersLine.propTypes = {\n    users_info: PropTypes.object,\n    onClick: PropTypes.func\n}\n\nUsersLine.defaultProps = {\n    users_info: {\n        all_users: [],\n        online_users: [],\n        offline_users: [],\n    },\n    onClick: () => { }\n}\n\nexport default UsersLine\n","import React from 'react'\nimport DisplayPercent from './DisplayPercent'\nimport CopyableText from './CopyableText'\nimport { getUtilizationColor } from '../utils/DataColor'\nimport DisplayRAM from './DisplayRAM'\n\n\nconst InfoCPU = props => {\n    const { cpu_model, cpu_usage, cpu_cores, ram_usage, ram_free, ram_total } = props.data\n    const ramUsed = ram_total - ram_free\n    const ramPercent = ram_total > 0 ? (ramUsed / ram_total) * 100 : 0\n\n    return (\n        <div style={{\n            marginBottom: '0.75rem',\n            padding: '0.75rem',\n            border: '1px solid var(--hacker-border)',\n            borderRadius: '0.5rem',\n            backgroundColor: 'var(--hacker-surface)'\n        }}>\n            <div style={{\n                display: 'flex',\n                flexWrap: 'wrap',\n                alignItems: 'center',\n                gap: '0.4rem',\n                marginBottom: '0.4rem'\n            }}>\n                <span style={{\n                    color: 'var(--hacker-text-secondary)',\n                    fontSize: '0.8rem',\n                    fontWeight: '500'\n                }}>\n                    CPU Model:\n                </span>\n                <span style={{\n                    color: 'var(--hacker-text-secondary)',\n                    fontSize: '0.8rem',\n                    fontWeight: '500'\n                }}>\n                    <CopyableText className=\"hacker-badge\" style={{ fontSize: '0.8rem', fontWeight: '500', color: 'var(--hacker-text-secondary)' }}>{cpu_model}</CopyableText>\n                </span>\n            </div>\n            {/* RAM Total */}\n            <div style={{\n                display: 'flex',\n                flexWrap: 'wrap',\n                alignItems: 'center',\n                gap: '0.4rem',\n                marginBottom: '0.4rem'\n            }}>\n                <span style={{\n                    color: 'var(--hacker-text-secondary)',\n                    fontSize: '0.8rem',\n                    fontWeight: '500'\n                }}>\n                    CPU Threads:\n                </span>\n                <span style={{\n                    color: 'var(--hacker-text-secondary)',\n                    fontSize: '0.8rem',\n                    fontWeight: '500'\n                }}>\n                    <CopyableText className=\"hacker-badge\" style={{ fontSize: '0.8rem', fontWeight: '500', color: 'var(--hacker-text-secondary)' }}>{cpu_cores}</CopyableText>\n                </span>\n            </div>\n\n\n\n            {/* CPU Utilization */}\n            <div className=\"metric-row mb-2 mt-2\">\n                <div className=\"d-flex justify-content-between align-items-center mb-1\">\n                    <span style={{\n                        color: 'var(--hacker-text-secondary)',\n                        fontSize: '0.75rem',\n                        fontWeight: '500'\n                    }}>\n                        CPU Utilization\n                    </span>\n                    <span style={{\n                        color: getUtilizationColor(cpu_usage),\n                        fontSize: '0.75rem',\n                        fontWeight: '600'\n                    }}>\n                        <DisplayPercent percent={cpu_usage} />\n                    </span>\n                </div>\n                <div style={{\n                    width: '100%',\n                    height: '6px',\n                    backgroundColor: 'var(--hacker-border)',\n                    borderRadius: '3px',\n                    overflow: 'hidden'\n                }}>\n                    <div style={{\n                        width: `${cpu_usage}%`,\n                        height: '100%',\n                        backgroundColor: getUtilizationColor(cpu_usage),\n                        borderRadius: '3px',\n                        transition: 'width 0.3s ease'\n                    }}></div>\n                </div>\n            </div>\n            {/* RAM Utilization */}\n            <div className=\"metric-row mb-2\">\n                <div className=\"d-flex justify-content-between align-items-center mb-1\">\n                    <span style={{\n                        color: 'var(--hacker-text-secondary)',\n                        fontSize: '0.75rem',\n                        fontWeight: '500'\n                    }}>\n                        RAM Utilization\n                    </span>\n                    <span style={{\n                        color: getUtilizationColor(ram_usage),\n                        fontSize: '0.75rem',\n                        fontWeight: '600'\n                    }}>\n                        <DisplayPercent percent={ram_usage} />\n                    </span>\n                </div>\n                <div style={{\n                    width: '100%',\n                    height: '6px',\n                    backgroundColor: 'var(--hacker-border)',\n                    borderRadius: '3px',\n                    overflow: 'hidden'\n                }}>\n                    <div style={{\n                        width: `${ramPercent}%`,\n                        height: '100%',\n                        backgroundColor: getUtilizationColor(ram_usage),\n                        borderRadius: '3px',\n                        transition: 'width 0.3s ease'\n                    }}></div>\n                </div>\n                <div style={{ color: 'var(--hacker-text-secondary)', fontSize: '0.75rem', marginTop: '0.1rem' }}>\n                    <DisplayRAM ram={ramUsed} /> / <DisplayRAM ram={ram_total} />\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default InfoCPU","import React from 'react'\nimport PropTypes from 'prop-types'\nimport CopyableText from './CopyableText'\n\nconst GcpCard = ({ process, handleInteractiveClick, secondsToShortString, singleLine }) => {\n    return (\n        <div className=\"process-item\" style={{\n            padding: '0.75rem',\n            backgroundColor: 'var(--hacker-surface)',\n            backgroundImage: 'repeating-linear-gradient(135deg, rgba(136,136,136,0.07) 0 2px, transparent 2px 8px)',\n            border: '1px solid var(--hacker-border)',\n            borderRadius: '0.5rem',\n            transition: 'var(--hacker-transition)',\n            display: 'flex',\n            flexDirection: 'column',\n            gap: '0.5rem',\n            minHeight: '120px',\n            position: 'relative',\n            overflow: 'hidden'\n        }}>\n            {/* Status indicator */}\n            <div style={{\n                position: 'absolute',\n                top: '0',\n                left: '0',\n                right: '0',\n                height: '2px',\n                backgroundColor: 'var(--hacker-border-light)',\n                opacity: 0.6\n            }}></div>\n\n            {/* First line: breathing dot, GPU x and PID */}\n            <div style={{ display: 'flex', alignItems: 'center', gap: '0.4rem' }}>\n                <div style={{ display: 'flex', alignItems: 'center', gap: '0.3rem' }}>\n                    <span style={{\n                        color: 'var(--hacker-text-secondary)',\n                        fontSize: '0.7rem',\n                        fontWeight: '600',\n                        lineHeight: '1.2',\n                        letterSpacing: '0.015em',\n                        opacity: 0.7\n                    }}>PROC</span>\n                    <CopyableText style={{\n                        color: 'var(--hacker-text-accent)',\n                        fontSize: '0.7rem',\n                        fontWeight: '600',\n                        lineHeight: '1.2',\n                        letterSpacing: '0.015em',\n                        opacity: 0.7\n                    }} onClick={handleInteractiveClick}>\n                        {process.pid}\n                    </CopyableText>\n                </div>\n                <span style={{\n                    color: 'var(--hacker-text-secondary)',\n                    fontSize: '0.6rem',\n                    fontWeight: '600',\n                    lineHeight: '1.2'\n                }}>on</span>\n                <span style={{\n                    color: 'var(--hacker-info)',\n                    fontSize: '0.7rem',\n                    fontWeight: '700',\n                    lineHeight: '1.2',\n                    letterSpacing: '0.015em',\n                    opacity: 0.8\n                }}>\n                    GPU {process.gpu_index}\n                </span>\n            </div>\n\n            {/* Second line: Runtime and username */}\n            <div style={{ display: 'flex', alignItems: 'center', gap: '0.4rem', flexWrap: 'wrap' }}>\n                <CopyableText style={{\n                    padding: '0.15rem 0.35rem',\n                    backgroundColor: 'rgba(108, 117, 125, 0.1)',\n                    border: '1px solid var(--hacker-text-secondary)',\n                    borderRadius: '1rem',\n                    color: 'var(--hacker-text-secondary)',\n                    fontSize: '0.7rem',\n                    fontWeight: '600',\n                    lineHeight: '1.2',\n                    letterSpacing: '0.02em',\n                    fontFamily: 'var(--hacker-font-mono)',\n                    transition: 'var(--hacker-transition)',\n                    display: 'inline-block',\n                    opacity: 0.8\n                }} onClick={handleInteractiveClick}>\n                    {process.user}\n                </CopyableText>\n                <span style={{\n                    color: 'var(--hacker-text-secondary)',\n                    fontSize: '0.6rem',\n                    fontWeight: '600',\n                    lineHeight: '1.2'\n                }}>•</span>\n                <div style={{\n                    padding: '0.15rem 0.35rem',\n                    backgroundColor: 'transparent',\n                    border: 'none',\n                    borderRadius: '0.25rem',\n                    fontSize: '0.7rem',\n                    color: 'var(--hacker-warning)',\n                    fontWeight: '600',\n                    lineHeight: '1.2',\n                    letterSpacing: '0.02em',\n                    fontFamily: 'var(--hacker-font-mono)',\n                    flexShrink: 0,\n                    display: 'flex',\n                    alignItems: 'center',\n                    gap: '0.2rem'\n                }}>\n                    {secondsToShortString(process.proc_uptime)}\n                </div>\n            </div>\n\n            {/* Command section */}\n            {process.command && (\n                <div style={{\n                    flex: 1,\n                    display: 'flex',\n                    alignItems: 'center'\n                }}>\n                    <div style={{\n                        padding: '0.4rem',\n                        backgroundColor: 'var(--hacker-surface)',\n                        border: '1px solid var(--hacker-border)',\n                        borderRadius: '0.25rem',\n                        fontSize: '0.65rem',\n                        fontFamily: 'var(--hacker-font-mono)',\n                        color: 'var(--hacker-text-secondary)',\n                        fontWeight: '600',\n                        lineHeight: '1.3',\n                        letterSpacing: '0.01em',\n                        overflow: 'hidden',\n                        wordBreak: 'break-word',\n                        minHeight: '2.6rem',\n                        display: 'flex',\n                        alignItems: 'center',\n                        width: '100%'\n                    }}>\n                        <CopyableText\n                            maxLength={60}\n                            style={{\n                                color: 'var(--hacker-text-secondary)',\n                                fontSize: '0.65rem',\n                                fontWeight: '600',\n                                lineHeight: '1.3'\n                            }}\n                        >\n                            {singleLine(process.command)}\n                        </CopyableText>\n                    </div>\n                </div>\n            )}\n        </div>\n    )\n}\n\nGcpCard.propTypes = {\n    process: PropTypes.object.isRequired,\n    handleInteractiveClick: PropTypes.func.isRequired,\n    secondsToShortString: PropTypes.func.isRequired,\n    singleLine: PropTypes.func.isRequired\n}\n\nexport default GcpCard","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { useState } from 'react'\nimport InfoInterfaces from './InfoInterfaces'\nimport GpuCard from './GpuCard'\nimport UsersLine from './UsersLine'\nimport CopyableText from './CopyableText'\nimport InfoCPU from './InfoCPU'\nimport GcpCard from './GcpCard'\n\nconst MachineCard = props => {\n\n    const [showDetails, SetShowDetails] = useState(false)\n    const [showGPUs, SetShowGPUs] = useState(false)\n    const [showActiveGCP, SetShowActiveGCP] = useState(false) // GCP: GPU Compute Processes\n    const [isHiding, setIsHiding] = useState(false)\n\n\n    ///////////////////////////////////////////////////////////////////////////\n    // UTILITIES\n    ///////////////////////////////////////////////////////////////////////////\n\n    const isEmpty = (s) => {\n        if (s == null || s === undefined || s === \"\" || s.length === 0) {\n            return true\n        } else {\n            return false\n        }\n    }\n\n    const numItems = (s) => {\n        if (s == null || s === undefined || s === \"\" || s.length === 0) {\n            return 0\n        } else {\n            return s.length\n        }\n    }\n\n    const secondsToShortString = (x) => {\n        x = Number(x);\n        let d = Math.floor(x / 86400);\n        let h = Math.floor(x % 86400 / 3600);\n        let m = Math.floor(x % 86400 % 3600 / 60);\n        let s = Math.floor(x % 86400 % 3600 % 60);\n\n        let dDisplay = d > 0 ? d + \"d \" : \"\";\n        let hDisplay = h > 0 ? h + \"h \" : \"\";\n        let sDisplay = s > 0 ? s + \"s \" : \"\";\n        let mDisplay = m > 0 ? m + \"m \" : sDisplay;\n\n        return dDisplay + hDisplay + mDisplay;\n    }\n\n\n    const getTimestamp = () => {\n        let v = props.data.created_at\n        let options = { year: 'numeric', month: 'short', day: 'numeric', hour: '2-digit', minute: '2-digit', second: '2-digit' }\n\n        if (typeof v === 'string' || v instanceof String) {\n            let d = new Date(v)\n            return d.toLocaleTimeString(\"en-GB\", options)\n        } else {\n            return \"N.A.\"\n        }\n    }\n\n    const isOnline = () => {\n        let v = props.data.created_at\n        let now = new Date()\n\n        if (typeof v === 'string' || v instanceof String) {\n            let d = new Date(v)\n            let i = now - d\n            // 2 Minutes = 120000 Milliseconds\n            if (i <= 120000) {\n                // console.log(\"is online\")\n                return true\n            }\n        }\n\n        return false\n    }\n\n    const singleLine = (s) => {\n        // keep string to single line\n        // remove all newlines\n        // remove all tabs\n        // remove all leading and trailing spaces\n        return s.replace(/(\\r\\n|\\n|\\r)/gm, \" \").replace(/\\t/g, ' ').trim()\n    }\n\n\n    ///////////////////////////////////////////////////////////////////////////\n    // HANDLERS\n    ///////////////////////////////////////////////////////////////////////////\n\n\n\n    const handleShowDetails = () => {\n        SetShowDetails((state) => {\n            if (state) {\n                SetShowGPUs(false)\n                SetShowActiveGCP(false)\n                return false\n            } else {\n                SetShowGPUs(true)\n                SetShowActiveGCP(true)\n                return true\n            }\n        })\n    }\n\n    const handleShowGPUs = () => {\n        SetShowGPUs((state) => {\n            if (state) {\n                return false\n            } else {\n                return true\n            }\n        })\n    }\n\n    const handleShowActiveGCP = () => {\n        SetShowActiveGCP((state) => {\n            if (state) {\n                return false\n            } else {\n                return true\n            }\n        })\n    }\n\n    // Handle click on interactive elements to prevent bubbling\n    const handleInteractiveClick = (e) => {\n        e.stopPropagation()\n    }\n\n    // Handle hiding with animation\n    const handleHideWithAnimation = (e) => {\n        e.stopPropagation()\n        setIsHiding(true)\n        // Delay the actual hiding until after animation completes\n        setTimeout(() => {\n            if (props.onHide) {\n                props.onHide()\n            }\n        }, 250) // Match the animation duration (0.25s)\n    }\n\n\n\n\n\n\n    const getStatusColor = () => {\n        return isOnline() ? 'var(--hacker-success)' : 'var(--hacker-text-secondary)'\n    }\n\n    return (\n        <div className={`hacker-card ${isHiding ? 'fade-out' : 'fade-in'}`} style={{\n            borderLeft: `4px solid ${getStatusColor()}`,\n            opacity: isOnline() ? 1 : 0.7\n        }} >\n            <div className=\"server-header d-flex align-items-center justify-content-between mb-2\">\n                <div className=\"d-flex align-items-center gap-2\">\n                    <h3 className=\"mb-0\" onClick={(e) => {\n                        e.stopPropagation()\n                        handleShowDetails()\n                    }} style={{\n                        color: getStatusColor(),\n                        fontSize: '1.3rem',\n                        fontWeight: '800',\n                        textShadow: isOnline() ? '0 0 8px var(--hacker-success)' : 'none',\n                        lineHeight: '1.2',\n                        letterSpacing: '0.025em'\n                    }}>\n                        {props.data.name}\n                    </h3>\n                </div>\n\n                <div className=\"d-flex align-items-center gap-1\" style={{ justifyContent: 'flex-end', flex: 1 }}>\n                    {/* <CopyableText\n                        className=\"hacker-badge\"\n                        style={{\n                            fontSize: '0.7rem',\n                            color: 'var(--hacker-text-secondary)',\n                            fontWeight: '600',\n                            lineHeight: '1.3'\n                        }}\n                        onClick={handleInteractiveClick}\n                    >\n                        {props.data.hostname}\n                    </CopyableText> */}\n\n                    {isOnline() ? (\n                        <span className=\"hacker-badge success\">\n                            <span className=\"pulse\" style={{ marginRight: '0.4rem' }}>●</span>\n                            ONLINE\n                        </span>\n                    ) : (\n                        <span className=\"hacker-badge danger\">\n                            OFFLINE\n                        </span>\n                    )}\n\n                    {isEmpty(props.data.gpu_status) ? (\n                        <span className=\"hacker-badge\">GPU N/A</span>\n                    ) : (\n                        <button className=\"hacker-badge info\" onClick={(e) => {\n                            e.stopPropagation()\n                            handleShowGPUs()\n                        }}>GPU x{numItems(props.data.gpu_status)}</button>\n                    )}\n\n                    {isEmpty(props.data.gpu_compute_processes) ? (\n                        <span className=\"hacker-badge\">AGC: 0</span>\n                    ) : (\n                        <button className=\"hacker-badge success\" onClick={(e) => {\n                            e.stopPropagation()\n                            handleShowActiveGCP()\n                        }}>AGC: {numItems(props.data.gpu_compute_processes)}</button>\n                    )}\n\n                    <button\n                        className=\"hacker-badge\"\n                        onClick={(e) => {\n                            e.stopPropagation()\n                            handleShowDetails()\n                        }}\n                        style={{\n                            cursor: 'pointer',\n                            border: '1px solid var(--hacker-border)',\n                            background: 'transparent'\n                        }}\n                    >\n                        {showDetails ? 'HIDE DETAILS' : 'DETAILS'}\n                    </button>\n                    {props.onHide && (\n                        <>\n                            <span style={{\n                                display: 'inline-block',\n                                width: '1px',\n                                height: '1.3em',\n                                background: 'var(--hacker-border)',\n                                margin: '0 0.5rem',\n                                opacity: 0.7,\n                                borderRadius: '1px',\n                                alignSelf: 'center',\n                            }} />\n                            <button\n                                onClick={handleHideWithAnimation}\n                                title=\"Hide this machine\"\n                                style={{\n                                    background: 'transparent',\n                                    border: 'none',\n                                    borderRadius: '50%',\n                                    width: '1.8em',\n                                    height: '1.8em',\n                                    display: 'flex',\n                                    alignItems: 'center',\n                                    justifyContent: 'center',\n                                    fontWeight: 'bold',\n                                    fontSize: '1.1em',\n                                    color: 'var(--hacker-text-secondary)',\n                                    cursor: 'pointer',\n                                    transition: 'background 0.15s, box-shadow 0.15s',\n                                    padding: 0,\n                                    outline: 'none',\n                                }}\n                                onMouseOver={e => { e.currentTarget.style.background = 'rgba(108,117,125,0.10)'; e.currentTarget.style.boxShadow = '0 1px 6px 0 rgba(0,0,0,0.10)'; }}\n                                onMouseOut={e => { e.currentTarget.style.background = 'transparent'; e.currentTarget.style.boxShadow = 'none'; }}\n                                tabIndex={0}\n                                onKeyPress={e => { if (e.key === 'Enter' || e.key === ' ') { handleHideWithAnimation(e); } }}\n                            >\n                                x\n                            </button>\n                        </>\n                    )}\n                </div>\n            </div>\n\n\n\n            <div className={`details-anim${showDetails ? ' expanded' : ' collapsed'}`}>\n\n                <div className=\"row\">\n                    <div className=\"col-md-6\">\n                        <p className=\"mb-1\">\n                            <span style={{ color: 'var(--hacker-text-secondary)' }}>Last seen:</span>\n                            <CopyableText className=\"hacker-badge ms-2\" onClick={handleInteractiveClick}>\n                                {getTimestamp()}\n                            </CopyableText>\n                        </p>\n                        <p className=\"mb-1\">\n                            <span style={{ color: 'var(--hacker-text-secondary)' }}>Uptime:</span>\n                            <CopyableText className=\"hacker-badge ms-2\" onClick={handleInteractiveClick}>\n                                {props.data.uptime_str}\n                            </CopyableText>\n                        </p>\n                        <p className=\"mb-1\">\n                            <span style={{ color: 'var(--hacker-text-secondary)' }}>Hostname:</span>\n                            <CopyableText className=\"hacker-badge ms-2\" onClick={handleInteractiveClick}>\n                                {props.data.hostname}\n                            </CopyableText>\n                        </p>\n\n                    </div>\n                    <div className=\"col-md-6\">\n                        <p className=\"mb-1\">\n                            <span style={{ color: 'var(--hacker-text-secondary)' }}>Arch:</span>\n                            <CopyableText className=\"hacker-badge ms-2\" onClick={handleInteractiveClick}>\n                                {props.data.architecture}\n                            </CopyableText>\n                        </p>\n                        <p className=\"mb-1\">\n                            <span style={{ color: 'var(--hacker-text-secondary)' }}>System:</span>\n                            <CopyableText className=\"hacker-badge ms-2\" onClick={handleInteractiveClick}>\n                                {props.data.linux_distro}\n                            </CopyableText>\n                        </p>\n                        <p className=\"mb-1\">\n                            <span style={{ color: 'var(--hacker-text-secondary)' }}>UID:</span>\n                            <CopyableText className=\"hacker-badge ms-2\" onClick={handleInteractiveClick}>\n                                {props.data.machine_id}\n                            </CopyableText>\n                        </p>\n                    </div>\n                </div>\n\n\n                <div className=\"server-details\" style={{\n                    // borderTop: '1px solid var(--hacker-border)',\n                    paddingTop: '0.75rem',\n                    // marginTop: '0.5rem',\n                }}>\n\n\n                    <InfoCPU data={{\n                        cpu_model: props.data.cpu_model,\n                        cpu_usage: props.data.cpu_usage,\n                        cpu_cores: props.data.cpu_cores,\n                        ram_usage: props.data.ram_usage,\n                        ram_free: props.data.ram_free,\n                        ram_total: props.data.ram_total\n                    }} />\n                    <InfoInterfaces data={props.data.ipv4s} mac_address={props.data.mac_address} onClick={handleInteractiveClick} />\n                    <UsersLine users_info={props.data.users_info} onClick={handleInteractiveClick} />\n                </div>\n            </div>\n\n            {isEmpty(props.data.gpu_status) || !showGPUs ? null :\n                <div className=\"gpu-section mt-2\">\n                    {props.data.gpu_status.map((gpu_data, idx) => <GpuCard key={idx} data={gpu_data} />)}\n                </div>\n            }\n\n            {isEmpty(props.data.gpu_compute_processes) || !showActiveGCP ? null :\n                <div className=\"mt-2\" style={{\n                    borderTop: '1px solid var(--hacker-border)',\n                    paddingTop: '0.75rem'\n                }}>\n                    <div className=\"d-flex align-items-center justify-content-between mb-2\">\n                        <div style={{\n                            display: 'flex',\n                            alignItems: 'center',\n                            gap: '0.5rem'\n                        }}>\n                            <h6 style={{\n                                color: 'var(--hacker-text-secondary)',\n                                margin: '0',\n                                fontSize: '0.8rem',\n                                fontWeight: '700',\n                                letterSpacing: '0.04em',\n                                lineHeight: '1.3'\n                            }}>\n                                ACTIVE GPU COMPUTE\n                            </h6>\n                            <span className=\"hacker-badge info\" style={{\n                                fontSize: '0.6rem',\n                                fontWeight: '700',\n                                lineHeight: '1.2'\n                            }}>\n                                {props.data.gpu_compute_processes.length} running\n                            </span>\n                        </div>\n                    </div>\n                    <div className=\"gcp-section\">\n                        {props.data.gpu_compute_processes.map((process, idx) =>\n                            <GcpCard\n                                key={idx}\n                                process={process}\n                                handleInteractiveClick={handleInteractiveClick}\n                                secondsToShortString={secondsToShortString}\n                                singleLine={singleLine}\n                            />\n                        )}\n                    </div>\n                </div>\n            }\n\n            {/* {isEmpty(props.data.gpu_compute_processes) || !showDetails ? null :\n                <div className=\"processes-table mt-2\">\n                    <h6 style={{\n                        color: 'var(--hacker-text-accent)',\n                        marginBottom: '0.75rem',\n                        fontSize: '0.85rem',\n                        fontWeight: '700',\n                        lineHeight: '1.3',\n                        letterSpacing: '0.025em'\n                    }}>Active GPU Compute Processes</h6>\n                    <div style={{\n                        overflowX: 'auto',\n                        border: '1px solid var(--hacker-border)',\n                        borderRadius: '0.5rem'\n                    }}>\n                        <table style={{\n                            width: '100%',\n                            borderCollapse: 'collapse',\n                            fontSize: '0.75rem'\n                        }}>\n                            <thead>\n                                <tr style={{\n                                    backgroundColor: 'var(--hacker-surface)',\n                                    borderBottom: '1px solid var(--hacker-border)'\n                                }}>\n                                    <th style={{\n                                        padding: '0.6rem',\n                                        textAlign: 'left',\n                                        color: 'var(--hacker-text-secondary)',\n                                        fontWeight: '700',\n                                        lineHeight: '1.3',\n                                        letterSpacing: '0.015em'\n                                    }}>GPU</th>\n                                    <th style={{\n                                        padding: '0.6rem',\n                                        textAlign: 'left',\n                                        color: 'var(--hacker-text-secondary)',\n                                        fontWeight: '700',\n                                        lineHeight: '1.3',\n                                        letterSpacing: '0.015em'\n                                    }}>PID</th>\n                                    <th style={{\n                                        padding: '0.6rem',\n                                        textAlign: 'left',\n                                        color: 'var(--hacker-text-secondary)',\n                                        fontWeight: '700',\n                                        lineHeight: '1.3',\n                                        letterSpacing: '0.015em'\n                                    }}>User</th>\n                                    <th style={{\n                                        padding: '0.6rem',\n                                        textAlign: 'left',\n                                        color: 'var(--hacker-text-secondary)',\n                                        fontWeight: '700',\n                                        lineHeight: '1.3',\n                                        letterSpacing: '0.015em'\n                                    }}>UpTime</th>\n                                    <th style={{\n                                        padding: '0.6rem',\n                                        textAlign: 'left',\n                                        color: 'var(--hacker-text-secondary)',\n                                        fontWeight: '700',\n                                        lineHeight: '1.3',\n                                        letterSpacing: '0.015em'\n                                    }}>CMD</th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                {props.data.gpu_compute_processes.map((process, idx) =>\n                                    <tr key={idx} style={{\n                                        borderBottom: '1px solid var(--hacker-border)',\n                                        transition: 'var(--hacker-transition)'\n                                    }}>\n                                        <td style={{\n                                            padding: '0.6rem',\n                                            color: 'var(--hacker-info)',\n                                            fontWeight: '700',\n                                            lineHeight: '1.3'\n                                        }}>{process.gpu_index}</td>\n                                        <td style={{ padding: '0.6rem' }}>\n                                            <CopyableText style={{\n                                                color: 'var(--hacker-text-accent)',\n                                                fontWeight: '700',\n                                                lineHeight: '1.3'\n                                            }} onClick={handleInteractiveClick}>{process.pid}</CopyableText>\n                                        </td>\n                                        <td style={{ padding: '0.6rem' }}>\n                                            <CopyableText style={{\n                                                padding: '0.15rem 0.35rem',\n                                                backgroundColor: 'rgba(108, 117, 125, 0.1)',\n                                                border: '1px solid var(--hacker-text-secondary)',\n                                                borderRadius: '1rem',\n                                                color: 'var(--hacker-text-secondary)',\n                                                fontSize: '0.7rem',\n                                                fontWeight: '600',\n                                                lineHeight: '1.2',\n                                                letterSpacing: '0.02em',\n                                                fontFamily: 'var(--hacker-font-mono)',\n                                                transition: 'var(--hacker-transition)',\n                                                display: 'inline-block',\n                                                opacity: 0.8\n                                            }} onClick={handleInteractiveClick}>\n                                                {process.user}\n                                            </CopyableText>\n                                        </td>\n                                        <td style={{\n                                            padding: '0.6rem',\n                                            color: 'var(--hacker-warning)',\n                                            fontWeight: '700',\n                                            lineHeight: '1.3'\n                                        }}>{process.proc_uptime_str}</td>\n                                        <td style={{\n                                            padding: '0.6rem',\n                                            color: 'var(--hacker-text-secondary)',\n                                            maxWidth: '300px',\n                                            overflow: 'hidden',\n                                            textOverflow: 'ellipsis',\n                                            whiteSpace: 'nowrap',\n                                            fontWeight: '600',\n                                            lineHeight: '1.3'\n                                        }}>\n                                            <CopyableText\n                                                maxLength={120}\n                                                style={{\n                                                    color: 'var(--hacker-text-secondary)',\n                                                    fontWeight: '600',\n                                                    lineHeight: '1.3'\n                                                }}\n                                                onClick={handleInteractiveClick}\n                                            >\n                                                {singleLine(process.command)}\n                                            </CopyableText>\n                                        </td>\n                                    </tr>\n                                )}\n                            </tbody>\n                        </table>\n                    </div>\n                </div>\n            } */}\n        </div>\n    )\n}\n\nMachineCard.propTypes = {\n    \"data\": PropTypes.object,\n}\n\nMachineCard.defaultProps = {\n    \"data\": {\n        \"gpu_status\": []\n    }\n}\n\nexport default MachineCard\n","import React from 'react'\nimport { useState, useEffect, useRef } from 'react'\nimport axios from \"axios\";\nimport MachineCard from \"./MachineCard\"\n\n// ============================================================================\n// CONSTANTS\n// ============================================================================\n\nconst DEFAULT_API_ROOT = \"https://api.mxshell.dev\";\n\nconst LOCALE_CONFIG = {\n    locale: \"en-SG\",\n    options: {\n        hour: \"numeric\",\n        minute: \"numeric\",\n        second: \"numeric\",\n        year: \"numeric\",\n        month: \"short\",\n        day: \"numeric\",\n    }\n};\n\nconst REFRESH_INTERVALS = {\n    INFINITY: 360000, // 360000 seconds = 100 hours (almost infinite)\n    DEFAULT: 60, // seconds\n    FAST: 5,\n    MEDIUM: 10,\n    SLOW: 60\n};\n\nconst STORAGE_KEYS = {\n    DYNAMIC: 'gpu_servers_dynamic',\n    DYNAMIC_INTERVAL: 'gpu_servers_dynamic_interval',\n    OPTION_A_CHECKED: 'gpu_servers_option_a_checked',\n    OPTION_B_CHECKED: 'gpu_servers_option_b_checked',\n    OPTION_C_CHECKED: 'gpu_servers_option_c_checked',\n    VIEW_KEY: 'gpu_servers_view_key',\n    HIDDEN_MACHINE_IDS: 'mxstatus_hidden_machine_ids'\n};\n\nconst CODE_SNIPPETS = [\n    // Python Dijkstra's\n    'def dijkstra(graph, start):',\n    '    import heapq',\n    '    queue = [(0, start)]',\n    '    distances = {v: float(\"inf\") for v in graph}',\n    '    distances[start] = 0',\n    '    while queue:',\n    '        (dist_u, u) = heapq.heappop(queue)',\n    '        for v, weight in graph[u]:',\n    '            alt = dist_u + weight',\n    '            if alt < distances[v]:',\n    '                distances[v] = alt',\n    '                heapq.heappush(queue, (alt, v))',\n    '    return distances',\n    // Python Quicksort\n    'def quicksort(arr):',\n    '    if len(arr) <= 1:',\n    '        return arr',\n    '    pivot = arr[len(arr) // 2]',\n    '    left = [x for x in arr if x < pivot]',\n    '    middle = [x for x in arr if x == pivot]',\n    '    right = [x for x in arr if x > pivot]',\n    '    return quicksort(left) + middle + quicksort(right)',\n    // Python Merge Sort\n    'def merge_sort(arr):',\n    '    if len(arr) > 1:',\n    '        mid = len(arr) // 2',\n    '        L = arr[:mid]',\n    '        R = arr[mid:]',\n    '        merge_sort(L)',\n    '        merge_sort(R)',\n    '        i = j = k = 0',\n    '        while i < len(L) and j < len(R):',\n    '            if L[i] < R[j]:',\n    '                arr[k] = L[i]',\n    '                i += 1',\n    '            else:',\n    '                arr[k] = R[j]',\n    '                j += 1',\n    '            k += 1',\n    '        while i < len(L):',\n    '            arr[k] = L[i]',\n    '            i += 1',\n    '            k += 1',\n    '        while j < len(R):',\n    '            arr[k] = R[j]',\n    '            j += 1',\n    '            k += 1',\n    // Python Binary Search\n    'def binary_search(arr, target):',\n    '    left, right = 0, len(arr) - 1',\n    '    while left <= right:',\n    '        mid = (left + right) // 2',\n    '        if arr[mid] == target:',\n    '            return mid',\n    '        elif arr[mid] < target:',\n    '            left = mid + 1',\n    '        else:',\n    '            right = mid - 1',\n    '    return -1',\n];\n\n// ============================================================================\n// UTILITY FUNCTIONS\n// ============================================================================\n\n// Local storage helper functions\nconst getFromStorage = (key, defaultValue) => {\n    try {\n        const item = localStorage.getItem(key)\n        return item !== null ? JSON.parse(item) : defaultValue\n    } catch (error) {\n        console.error(`Error reading from localStorage for key ${key}:`, error)\n        return defaultValue\n    }\n}\n\nconst setToStorage = (key, value) => {\n    try {\n        localStorage.setItem(key, JSON.stringify(value))\n    } catch (error) {\n        console.error(`Error writing to localStorage for key ${key}:`, error)\n    }\n}\n\n// Machine status helper\nconst isMachineOnline = (machineData) => {\n    let v = machineData.created_at\n    let now = new Date()\n\n    if (typeof v === 'string' || v instanceof String) {\n        let d = new Date(v)\n        let i = now - d\n        // 2 Minutes = 120000 Milliseconds\n        if (i <= 120000) {\n            return true\n        }\n    }\n    return false\n}\n\n// Custom hook for intervals\nconst useInterval = (callback, delay) => {\n    const savedCallback = useRef();\n\n    // Remember the latest callback.\n    useEffect(() => {\n        savedCallback.current = callback;\n    }, [callback]);\n\n    // Set up the interval.\n    useEffect(() => {\n        function tick() {\n            savedCallback.current();\n        }\n        if (delay !== null) {\n            let id = setInterval(tick, delay);\n            return () => clearInterval(id);\n        }\n    }, [delay]);\n}\n\n// ============================================================================\n// SUB-COMPONENTS\n// ============================================================================\n\n// Animated code flow background for welcome page\nfunction CodeFlowBackground() {\n    // Compose lines for the effect\n    const lines = Array.from({ length: 18 }, (_, i) => {\n        // Randomly pick 1-2 snippets and join with spacing/indent\n        let n = Math.floor(Math.random() * 2) + 1;\n        let line = '';\n        for (let j = 0; j < n; j++) {\n            let snippet = CODE_SNIPPETS[Math.floor(Math.random() * CODE_SNIPPETS.length)];\n            if (j > 0) line += '    ';\n            line += snippet;\n        }\n        return line;\n    });\n\n    return (\n        <div style={{\n            position: 'fixed',\n            zIndex: 0,\n            top: 0,\n            left: 0,\n            width: '100vw',\n            height: '100vh',\n            pointerEvents: 'none',\n            overflow: 'hidden',\n            background: 'linear-gradient(120deg, #0a0f0a 80%, #0f1a0f 100%)',\n        }}>\n            {lines.map((line, idx) => (\n                <div\n                    key={idx}\n                    style={{\n                        position: 'absolute',\n                        top: `calc(${(idx / lines.length) * 100}% - 1.2rem)`,\n                        left: 0,\n                        width: '100vw',\n                        whiteSpace: 'nowrap',\n                        fontFamily: 'var(--hacker-font-mono, monospace)',\n                        fontSize: '1.05rem',\n                        color: 'rgba(0,255,65,0.13)',\n                        textShadow: '0 0 8px #00ff41, 0 0 2px #00ff41',\n                        opacity: 0.7,\n                        letterSpacing: '0.08em',\n                        animation: `codeflow-left 12s linear infinite`,\n                        animationDelay: `${idx * 0.7}s`,\n                        userSelect: 'none',\n                    }}\n                >\n                    {line}\n                </div>\n            ))}\n            {/* Overlay for extra darkness and contrast */}\n            <div style={{\n                position: 'absolute',\n                top: 0,\n                left: 0,\n                width: '100vw',\n                height: '100vh',\n                background: 'linear-gradient(120deg, rgba(10,16,10,0.92) 80%, rgba(16,26,16,0.97) 100%)',\n                zIndex: 1,\n            }} />\n            <style>{`\n                @keyframes codeflow-left {\n                    0% { transform: translateX(100vw); }\n                    100% { transform: translateX(-100vw); }\n                }\n            `}</style>\n        </div>\n    );\n}\n\n// Loading Animation Component\nconst LoadingAnimation = () => {\n    return (\n        <div className=\"loading-container\">\n            <div className=\"loading-content\">\n                <div className=\"loading-logo\">\n                    <div className=\"loading-logo-text\">MXStatus</div>\n                    <div className=\"loading-logo-subtitle\">INITIALIZING...</div>\n                </div>\n                <div className=\"loading-spinner\">\n                    <div className=\"spinner-ring\"></div>\n                    <div className=\"spinner-ring\"></div>\n                    <div className=\"spinner-ring\"></div>\n                </div>\n                <div className=\"loading-status\">\n                    <div className=\"loading-dots\">\n                        <span></span>\n                        <span></span>\n                        <span></span>\n                    </div>\n                    <div className=\"loading-text\">CONNECTING TO SERVERS</div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\n// Error Message Component\nconst ErrorMessage = ({ error, onRetry }) => {\n    return (\n        <div className=\"hacker-card\" style={{\n            textAlign: 'center',\n            padding: '2rem',\n            borderColor: 'var(--hacker-danger)',\n            borderWidth: '2px'\n        }}>\n            <div style={{\n                color: 'var(--hacker-danger)',\n                fontSize: '1.2rem',\n                fontWeight: '700',\n                marginBottom: '1rem',\n                letterSpacing: '0.02em'\n            }}>\n                ⚠️ CONNECTION ERROR\n            </div>\n            <p style={{\n                margin: '0 0 1.5rem 0',\n                fontSize: '0.9rem',\n                fontWeight: '600',\n                lineHeight: '1.5',\n                letterSpacing: '0.015em',\n                color: 'var(--hacker-text-secondary)'\n            }}>\n                {error}\n            </p>\n            <button\n                onClick={onRetry}\n                style={{\n                    backgroundColor: 'var(--hacker-surface)',\n                    border: '1px solid var(--hacker-danger)',\n                    color: 'var(--hacker-danger)',\n                    padding: '0.5rem 1rem',\n                    borderRadius: '0.25rem',\n                    fontSize: '0.8rem',\n                    fontFamily: 'var(--hacker-font-mono)',\n                    fontWeight: '600',\n                    letterSpacing: '0.02em',\n                    cursor: 'pointer',\n                    transition: 'var(--hacker-transition)',\n                    textTransform: 'uppercase'\n                }}\n                onMouseEnter={(e) => {\n                    e.target.style.backgroundColor = 'var(--hacker-danger)';\n                    e.target.style.color = 'var(--hacker-bg)';\n                    e.target.style.textShadow = '0 0 8px var(--hacker-danger)';\n                }}\n                onMouseLeave={(e) => {\n                    e.target.style.backgroundColor = 'var(--hacker-surface)';\n                    e.target.style.color = 'var(--hacker-danger)';\n                    e.target.style.textShadow = 'none';\n                }}\n            >\n                Retry Connection\n            </button>\n        </div>\n    )\n}\n\n// ============================================================================\n// MAIN COMPONENT\n// ============================================================================\n\nconst PageMain = () => {\n\n    // ========================================================================\n    // STATE MANAGEMENT\n    // ========================================================================\n\n    // API and Loading State\n    const [dataSnapshot, setDataSnapshot] = useState([]);\n    const [isLoading, setIsLoading] = useState(true);\n    const [loadingStartTime, setLoadingStartTime] = useState(null);\n    const [showContent, setShowContent] = useState(false);\n    const [error, setError] = useState(null);\n\n    // Server Configuration State\n    const [apiRoot, setApiRoot] = useState(DEFAULT_API_ROOT);\n    const [serverMode, setServerMode] = useState(\"default\"); // 'default' or 'custom'\n    const [pendingServer, setPendingServer] = useState(\"\");\n    const [pendingViewKey, setPendingViewKey] = useState(() =>\n        getFromStorage(STORAGE_KEYS.VIEW_KEY, \"\"));\n    const [welcomeError, setWelcomeError] = useState(\"\");\n\n    // Refresh and Auto-update State\n    const [dynamicInterval, setDynamicInterval] = useState(() =>\n        getFromStorage(STORAGE_KEYS.DYNAMIC_INTERVAL, REFRESH_INTERVALS.INFINITY)\n    )\n    const [dynamic, setDynamic] = useState(() =>\n        getFromStorage(STORAGE_KEYS.DYNAMIC, false)\n    )\n\n    // View Preferences State\n    const [optionAChecked, setOptionAChecked] = useState(() =>\n        getFromStorage(STORAGE_KEYS.OPTION_A_CHECKED, false)\n    )\n    const [optionBChecked, setOptionBChecked] = useState(() =>\n        getFromStorage(STORAGE_KEYS.OPTION_B_CHECKED, false)\n    )\n    const [optionCChecked, setOptionCChecked] = useState(() =>\n        getFromStorage(STORAGE_KEYS.OPTION_C_CHECKED, false)\n    )\n    const [viewKey, setViewKey] = useState(() =>\n        getFromStorage(STORAGE_KEYS.VIEW_KEY, \"\")\n    )\n\n    // Machine Visibility State\n    const [hiddenMachineIds, setHiddenMachineIds] = useState(() => {\n        try {\n            const item = localStorage.getItem(STORAGE_KEYS.HIDDEN_MACHINE_IDS);\n            return item ? JSON.parse(item) : [];\n        } catch {\n            return [];\n        }\n    });\n    const [showAllMachines, setShowAllMachines] = useState(false);\n\n    // ========================================================================\n    // API FUNCTIONS\n    // ========================================================================\n\n    const getData = async (customRoot, customKey) => {\n        setError(null);\n        setWelcomeError(\"\");\n        const root = customRoot || apiRoot;\n        const key = customKey || viewKey;\n        const config = {\n            method: \"GET\",\n            url: root + \"/view\",\n            headers: { \"accept\": \"application/json\" },\n            params: { view_key: key }\n        };\n        await axios(config)\n            .then((response) => {\n                if (response.status === 200) {\n                    if (response.data && Array.isArray(response.data) && response.data.length > 0) {\n                        setDataSnapshot(response.data)\n                        setError(null)\n                    } else {\n                        setDataSnapshot([])\n                        setError(\"No data found for this view key. Please check if the key is correct or if there are any active servers.\")\n                    }\n                    setIsLoading(false)\n                } else {\n                    setDataSnapshot([])\n                    setError(\"Server returned an unexpected response. Please try again.\")\n                    setIsLoading(false)\n                }\n            })\n            .catch((error) => {\n                setDataSnapshot([])\n                if (error.response) {\n                    if (error.response.status === 404) {\n                        setError(\"View key not found. Please check if the key is correct.\")\n                    } else if (error.response.status === 403) {\n                        setError(\"Access denied. This view key may be invalid or expired.\")\n                    } else if (error.response.status >= 500) {\n                        setError(\"Server error. Please try again later.\")\n                    } else {\n                        setError(`Server error (${error.response.status}). Please try again.`)\n                    }\n                } else if (error.request) {\n                    setError(\"Network error. Please check your connection and try again.\")\n                } else {\n                    setError(\"An unexpected error occurred. Please try again.\")\n                }\n                setIsLoading(false)\n            })\n    }\n\n    // ========================================================================\n    // EVENT HANDLERS\n    // ========================================================================\n\n    // Refresh and Reset Handlers\n    const handleRefresh = () => {\n        setViewKey(pendingViewKey.trim())\n        getData()\n    }\n\n    const resetToDefaults = () => {\n        // Clear all local storage\n        Object.values(STORAGE_KEYS).forEach(key => {\n            localStorage.removeItem(key)\n        })\n\n        // Reset all states to default values\n        setDynamicInterval(REFRESH_INTERVALS.INFINITY)\n        setDynamic(false)\n        setOptionAChecked(false)\n        setOptionBChecked(false)\n        setOptionCChecked(false)\n        setViewKey(\"\")\n        setPendingViewKey(\"\")\n        setError(null)\n        setDataSnapshot([])\n\n        // Trigger data fetch with default view key\n        setTimeout(() => {\n            getData()\n        }, 100)\n    }\n\n    // Auto-refresh Handlers\n    const handleDynamicOptions = (e) => {\n        setDynamic(true)\n        setDynamicInterval(e.target.value)\n        showRadioCheck(e.target.value)\n    }\n\n    const showRadioCheck = (value) => {\n        // cast value to int\n        const intValue = parseInt(value);\n\n        if (intValue === REFRESH_INTERVALS.FAST) {\n            setOptionAChecked(true)\n            setOptionBChecked(false)\n            setOptionCChecked(false)\n        } else if (intValue === REFRESH_INTERVALS.MEDIUM) {\n            setOptionAChecked(false)\n            setOptionBChecked(true)\n            setOptionCChecked(false)\n        } else if (intValue === REFRESH_INTERVALS.SLOW) {\n            setOptionAChecked(false)\n            setOptionBChecked(false)\n            setOptionCChecked(true)\n        } else {\n            console.log(intValue)\n        }\n    }\n\n    const uncheckRadioAll = () => {\n        setOptionAChecked(false)\n        setOptionBChecked(false)\n        setOptionCChecked(false)\n    }\n\n    const toggleDynamic = () => {\n        setDynamic((s) => {\n            if (s) {\n                console.log(\"Auto Refresh turned off\")\n                setDynamicInterval(REFRESH_INTERVALS.INFINITY)\n                uncheckRadioAll()\n                return false\n            } else {\n                console.log(\"Auto Refresh turned on\")\n                setDynamicInterval(REFRESH_INTERVALS.DEFAULT)\n                showRadioCheck(REFRESH_INTERVALS.DEFAULT)\n                return true\n            }\n        })\n    }\n\n    // Machine Visibility Handlers\n    const hideMachine = (machine_id) => {\n        setHiddenMachineIds(ids => ids.includes(machine_id) ? ids : [...ids, machine_id]);\n    };\n\n    const handleShowAllMachines = () => {\n        setHiddenMachineIds([]);\n        setShowAllMachines(true);\n        setTimeout(() => setShowAllMachines(false), 100); // reset after render\n    };\n\n    const handleHideOfflineMachines = () => {\n        const offlineIds = dataSnapshot.filter(m => !isMachineOnline(m)).map(m => m.machine_id);\n        setHiddenMachineIds(ids => Array.from(new Set([...ids, ...offlineIds])));\n    };\n\n    // Welcome Page Handler\n    function handleWelcomeEnter() {\n        setWelcomeError(\"\");\n        const serverToTest = serverMode === \"default\" ? DEFAULT_API_ROOT : pendingServer.trim();\n        const keyToTest = pendingViewKey.trim();\n        if (!keyToTest) {\n            setWelcomeError(\"Please enter a view key.\");\n            return;\n        }\n        if (serverMode === \"custom\" && !/^https?:\\/\\//.test(serverToTest)) {\n            setWelcomeError(\"Please enter a valid server address (must start with http:// or https://)\");\n            return;\n        }\n        setIsLoading(true);\n        setShowContent(false); // Show loading animation\n        const loadingStart = Date.now();\n        axios({\n            method: \"GET\",\n            url: serverToTest + \"/view\",\n            headers: { \"accept\": \"application/json\" },\n            params: { view_key: keyToTest }\n        })\n            .then((response) => {\n                const elapsed = Date.now() - loadingStart;\n                const finish = () => {\n                    if (response.status === 200 && Array.isArray(response.data)) {\n                        setApiRoot(serverToTest);\n                        setViewKey(keyToTest);\n                        setPendingViewKey(keyToTest);\n                        setDataSnapshot(response.data);\n                        setWelcomeError(\"\");\n                    } else {\n                        setWelcomeError(\"Invalid response from server. Please check your server and view key.\");\n                    }\n                    setShowContent(true);\n                    setIsLoading(false);\n                };\n                if (elapsed < 1000) {\n                    setTimeout(finish, 1000 - elapsed);\n                } else {\n                    finish();\n                }\n            })\n            .catch((error) => {\n                const elapsed = Date.now() - loadingStart;\n                const finish = () => {\n                    let msg = \"Failed to verify server or view key.\";\n                    if (error.response && error.response.status === 404) {\n                        msg = \"View key not found. Please check if the key is correct.\";\n                    } else if (error.response && error.response.status === 403) {\n                        msg = \"Access denied. This view key may be invalid or expired.\";\n                    } else if (error.code === 'ERR_NETWORK') {\n                        msg = \"Network error. Please check your server address and connection.\";\n                    }\n                    setWelcomeError(msg);\n                    setIsLoading(false);\n                    setShowContent(true);\n                };\n                if (elapsed < 1000) {\n                    setTimeout(finish, 1000 - elapsed);\n                } else {\n                    finish();\n                }\n            });\n    }\n\n    // ========================================================================\n    // COMPUTED VALUES\n    // ========================================================================\n\n    // Filter machines: hide if in hiddenMachineIds, unless showAllMachines is true\n    const filteredMachines = (showAllMachines\n        ? dataSnapshot\n        : dataSnapshot.filter(machine => !hiddenMachineIds.includes(machine.machine_id))\n    );\n\n    // ========================================================================\n    // EFFECTS\n    // ========================================================================\n\n    // Persistence Effects\n    useEffect(() => {\n        setToStorage(STORAGE_KEYS.DYNAMIC_INTERVAL, dynamicInterval)\n    }, [dynamicInterval])\n\n    useEffect(() => {\n        setToStorage(STORAGE_KEYS.DYNAMIC, dynamic)\n    }, [dynamic])\n\n    useEffect(() => {\n        setToStorage(STORAGE_KEYS.OPTION_A_CHECKED, optionAChecked)\n    }, [optionAChecked])\n\n    useEffect(() => {\n        setToStorage(STORAGE_KEYS.OPTION_B_CHECKED, optionBChecked)\n    }, [optionBChecked])\n\n    useEffect(() => {\n        setToStorage(STORAGE_KEYS.OPTION_C_CHECKED, optionCChecked)\n    }, [optionCChecked])\n\n    useEffect(() => {\n        setToStorage(STORAGE_KEYS.VIEW_KEY, viewKey)\n    }, [viewKey])\n\n    useEffect(() => {\n        localStorage.setItem(STORAGE_KEYS.HIDDEN_MACHINE_IDS, JSON.stringify(hiddenMachineIds));\n    }, [hiddenMachineIds]);\n\n    // Data Loading Effects\n    useEffect(() => {\n        getData();\n        setLoadingStartTime(Date.now());\n        // eslint-disable-next-line react-hooks/exhaustive-deps       \n    }, [viewKey]);\n\n    // Loading Animation Effect\n    useEffect(() => {\n        if (!isLoading && loadingStartTime) {\n            const elapsedTime = Date.now() - loadingStartTime;\n            const minimumLoadingTime = 1000; // 1 second\n\n            if (elapsedTime < minimumLoadingTime) {\n                const remainingTime = minimumLoadingTime - elapsedTime;\n                setTimeout(() => {\n                    setShowContent(true);\n                }, remainingTime);\n            } else {\n                setShowContent(true);\n            }\n        }\n    }, [isLoading, loadingStartTime]);\n\n    // Auto-refresh Effect\n    useInterval(() => {\n        getData()\n    }, dynamicInterval * 1000);\n\n    // ========================================================================\n    // RENDER HELPERS\n    // ========================================================================\n\n    const renderWelcomePage = () => (\n        <div style={{\n            height: '100vh',\n            width: '100vw',\n            overflow: 'hidden',\n            position: 'fixed',\n            top: 0,\n            left: 0,\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'center',\n            background: 'none',\n            margin: 0,\n            padding: 0,\n        }} className=\"fade-in\">\n            <CodeFlowBackground />\n            <div className=\"hacker-card mb-3\" style={{\n                maxWidth: 480,\n                width: '100%',\n                textAlign: \"left\",\n                padding: '2.5rem 2.5rem 2.2rem 2.5rem',\n                boxSizing: 'border-box',\n                borderRadius: '1.25rem',\n                boxShadow: '0 8px 32px 0 rgba(0,255,65,0.10), 0 1.5px 8px 0 rgba(0,255,65,0.08)',\n                border: '1.5px solid var(--hacker-border)',\n                background: 'linear-gradient(135deg, rgba(20,30,20,0.98) 60%, rgba(0,255,65,0.04) 100%)',\n                position: 'relative',\n                animation: 'fadeInUp 0.7s cubic-bezier(.4,1.4,.6,1)'\n            }}>\n                {/* Logo/Icon */}\n                <div style={{ display: 'flex', justifyContent: 'center', marginBottom: '1.2rem' }}>\n                    <img src=\"/favicon-32x32.png\" alt=\"MXStatus Logo\" style={{ width: 40, height: 40, borderRadius: 8, boxShadow: '0 2px 8px rgba(0,255,65,0.10)' }} />\n                </div>\n                {/* Heading with accent underline */}\n                <h2 style={{\n                    color: 'var(--hacker-text-accent)',\n                    fontWeight: 900,\n                    marginBottom: '0.7rem',\n                    textAlign: 'center',\n                    fontSize: '2.1rem',\n                    letterSpacing: '0.04em',\n                    lineHeight: 1.1,\n                    position: 'relative',\n                }}>\n                    Welcome to MXStatus\n                    <span style={{\n                        display: 'block',\n                        width: 56,\n                        height: 4,\n                        background: 'linear-gradient(90deg, var(--hacker-text-accent) 60%, transparent 100%)',\n                        borderRadius: 2,\n                        margin: '0.5rem auto 0',\n                        opacity: 0.7\n                    }}></span>\n                </h2>\n                <div className=\"mb-4\" style={{ fontWeight: 600, color: 'var(--hacker-text-secondary)', fontSize: '1.05rem', letterSpacing: '0.01em', textAlign: 'center', marginBottom: '2.2rem' }}>\n                    Please enter your view key and server to access your dashboard.\n                </div>\n                {/* Server Selection */}\n                <div className=\"d-flex flex-wrap align-items-center gap-3 mb-3 control-center-row\" style={{ marginBottom: '1.5rem' }}>\n                    <label className=\"form-check-label me-2\" style={{\n                        color: 'var(--hacker-text-secondary)',\n                        fontSize: '0.95rem',\n                        fontWeight: '700',\n                        minWidth: '80px',\n                        letterSpacing: '0.01em',\n                    }}>\n                        Select:\n                    </label>\n                    <div className=\"d-flex align-items-center gap-3\" style={{ flex: 1 }}>\n                        <div className=\"form-check d-flex align-items-center\" style={{ marginRight: '1.2rem' }}>\n                            <input\n                                className=\"form-check-input\"\n                                type=\"radio\"\n                                name=\"serverMode\"\n                                value=\"default\"\n                                checked={serverMode === \"default\"}\n                                onChange={() => { setServerMode(\"default\"); setPendingServer(\"\"); }}\n                                style={{ marginRight: 6 }}\n                                id=\"server-default\"\n                            />\n                            <label className=\"form-check-label ms-1\" htmlFor=\"server-default\" style={{\n                                color: 'var(--hacker-text-secondary)',\n                                fontSize: '0.95rem',\n                                fontWeight: '700'\n                            }}>Default Server</label>\n                        </div>\n                        <div className=\"form-check d-flex align-items-center\" style={{ marginRight: '1.2rem' }}>\n                            <input\n                                className=\"form-check-input\"\n                                type=\"radio\"\n                                name=\"serverMode\"\n                                value=\"custom\"\n                                checked={serverMode === \"custom\"}\n                                onChange={() => setServerMode(\"custom\")}\n                                style={{ marginRight: 6 }}\n                                id=\"server-custom\"\n                            />\n                            <label className=\"form-check-label ms-1\" htmlFor=\"server-custom\" style={{\n                                color: 'var(--hacker-text-secondary)',\n                                fontSize: '0.95rem',\n                                fontWeight: '700'\n                            }}>Custom Server</label>\n                        </div>\n                    </div>\n                </div>\n                {serverMode === \"custom\" && (\n                    <div className=\"d-flex flex-wrap align-items-center gap-3 mb-3 control-center-row\" style={{ marginBottom: '1.5rem' }}>\n                        <label className=\"form-check-label me-2\" style={{\n                            color: 'var(--hacker-text-secondary)',\n                            fontSize: '0.95rem',\n                            fontWeight: '700',\n                            minWidth: '80px',\n                            letterSpacing: '0.01em',\n                        }}>\n                            Server:\n                        </label>\n                        <input\n                            type=\"text\"\n                            value={pendingServer}\n                            onChange={e => setPendingServer(e.target.value)}\n                            placeholder=\"Enter server address\"\n                            style={{\n                                backgroundColor: 'var(--hacker-surface)',\n                                border: '1.5px solid var(--hacker-border)',\n                                color: 'var(--hacker-text-primary)',\n                                padding: '0.5rem 1rem',\n                                borderRadius: '0.4rem',\n                                fontSize: '1rem',\n                                fontFamily: 'var(--hacker-font-mono)',\n                                fontWeight: '600',\n                                letterSpacing: '0.02em',\n                                minWidth: '220px',\n                                transition: 'var(--hacker-transition)',\n                                boxShadow: '0 1.5px 8px 0 rgba(0,255,65,0.07)'\n                            }}\n                            autoFocus\n                        />\n                    </div>\n                )}\n                {/* View Key Input */}\n                <div className=\"d-flex flex-wrap align-items-center gap-3 mb-3 control-center-row\" style={{ marginBottom: '2.1rem' }}>\n                    <label className=\"form-check-label me-2\" style={{\n                        color: 'var(--hacker-text-secondary)',\n                        fontSize: '0.95rem',\n                        fontWeight: '700',\n                        minWidth: '80px',\n                        letterSpacing: '0.01em',\n                    }}>\n                        View Key:\n                    </label>\n                    <input\n                        type=\"text\"\n                        value={pendingViewKey}\n                        onChange={e => setPendingViewKey(e.target.value)}\n                        onKeyDown={e => { if (e.key === 'Enter') handleWelcomeEnter(); }}\n                        style={{\n                            backgroundColor: 'var(--hacker-surface)',\n                            border: '1.5px solid var(--hacker-border)',\n                            color: 'var(--hacker-text-primary)',\n                            padding: '0.5rem 1rem',\n                            borderRadius: '0.4rem',\n                            fontSize: '1rem',\n                            fontFamily: 'var(--hacker-font-mono)',\n                            fontWeight: '600',\n                            letterSpacing: '0.02em',\n                            minWidth: '220px',\n                            transition: 'var(--hacker-transition)',\n                            boxShadow: '0 1.5px 8px 0 rgba(0,255,65,0.07)'\n                        }}\n                        placeholder=\"Enter view key\"\n                    />\n                </div>\n                <div className=\"d-flex flex-wrap align-items-center gap-3 mb-2 control-center-row\" style={{ justifyContent: 'center', marginBottom: '0.5rem' }}>\n                    <button\n                        onClick={handleWelcomeEnter}\n                        style={{\n                            background: 'linear-gradient(90deg, var(--hacker-text-accent) 0%, var(--hacker-success) 100%)',\n                            border: 'none',\n                            color: 'var(--hacker-bg)',\n                            padding: '0.7rem 2.2rem',\n                            borderRadius: '0.5rem',\n                            fontSize: '1.08rem',\n                            fontFamily: 'var(--hacker-font-mono)',\n                            fontWeight: '800',\n                            letterSpacing: '0.04em',\n                            cursor: 'pointer',\n                            boxShadow: '0 2px 12px 0 rgba(0,255,65,0.10)',\n                            transition: 'all 0.18s cubic-bezier(.4,1.4,.6,1)',\n                            textTransform: 'uppercase',\n                            marginTop: '0.5rem',\n                            outline: 'none',\n                        }}\n                        onMouseOver={e => {\n                            e.target.style.background = 'linear-gradient(90deg, var(--hacker-success) 0%, var(--hacker-text-accent) 100%)';\n                            e.target.style.color = 'var(--hacker-bg)';\n                            e.target.style.boxShadow = '0 4px 18px 0 rgba(0,255,65,0.18)';\n                        }}\n                        onMouseOut={e => {\n                            e.target.style.background = 'linear-gradient(90deg, var(--hacker-text-accent) 0%, var(--hacker-success) 100%)';\n                            e.target.style.color = 'var(--hacker-bg)';\n                            e.target.style.boxShadow = '0 2px 12px 0 rgba(0,255,65,0.10)';\n                        }}\n                        disabled={pendingViewKey.trim() === \"\" || (serverMode === \"custom\" && pendingServer.trim() === \"\")}\n                    >\n                        Enter\n                    </button>\n                </div>\n                {welcomeError && (\n                    <div style={{ color: 'var(--hacker-danger)', marginTop: '1rem', fontWeight: 600, textAlign: 'center', fontSize: '1.05rem', letterSpacing: '0.01em' }}>{welcomeError}</div>\n                )}\n            </div>\n        </div>\n    );\n\n    const renderControlCenter = () => (\n        <div className=\"hacker-card mb-3\">\n            <h6 style={{\n                color: 'var(--hacker-text-accent)',\n                marginBottom: '1.25rem',\n                fontSize: '0.9rem',\n                fontWeight: '700',\n                letterSpacing: '0.04em',\n                lineHeight: '1.3'\n            }}>\n                CONTROL CENTER\n            </h6>\n\n            {/* View Key Configuration */}\n            <div className=\"d-flex flex-wrap align-items-center gap-3 mb-3\">\n                <div className=\"d-flex align-items-center\">\n                    <label className=\"form-check-label me-2\" style={{\n                        color: 'var(--hacker-text-secondary)',\n                        fontSize: '0.85rem',\n                        fontWeight: '600',\n                        minWidth: '80px'\n                    }}>\n                        View Key:\n                    </label>\n                    <input\n                        type=\"text\"\n                        value={pendingViewKey}\n                        onChange={(e) => setPendingViewKey(e.target.value)}\n                        style={{\n                            backgroundColor: 'var(--hacker-surface)',\n                            border: '1px solid var(--hacker-border)',\n                            color: 'var(--hacker-text-primary)',\n                            padding: '0.375rem 0.75rem',\n                            borderRadius: '0.25rem',\n                            fontSize: '0.7rem',\n                            fontFamily: 'var(--hacker-font-mono)',\n                            fontWeight: '600',\n                            letterSpacing: '0.02em',\n                            minWidth: '140px',\n                            transition: 'var(--hacker-transition)'\n                        }}\n                        onFocus={(e) => {\n                            e.target.style.borderColor = 'var(--hacker-text-accent)';\n                            e.target.style.boxShadow = '0 0 0 1px var(--hacker-text-accent)';\n                        }}\n                        onBlur={(e) => {\n                            e.target.style.borderColor = 'var(--hacker-border)';\n                            e.target.style.boxShadow = 'none';\n                        }}\n                        placeholder=\"Enter view key\"\n                    />\n                </div>\n                <button\n                    className=\"hacker-badge\"\n                    onClick={handleRefresh}\n                    style={{\n                        fontSize: '0.85rem',\n                        fontWeight: 600,\n                        padding: '0.3rem 0.8rem',\n                        border: 'none',\n                        background: 'none',\n                        color: 'var(--hacker-text-secondary)',\n                        cursor: 'pointer',\n                        boxShadow: 'none',\n                        transition: 'color 0.15s',\n                    }}\n                    onMouseOver={e => e.currentTarget.style.color = 'var(--hacker-text-accent)'}\n                    onMouseOut={e => e.currentTarget.style.color = 'var(--hacker-text-secondary)'}\n                >\n                    Refresh\n                </button>\n                <button\n                    className=\"hacker-badge\"\n                    onClick={resetToDefaults}\n                    style={{\n                        fontSize: '0.85rem',\n                        fontWeight: 600,\n                        padding: '0.3rem 0.8rem',\n                        border: 'none',\n                        background: 'none',\n                        color: 'var(--hacker-text-secondary)',\n                        cursor: 'pointer',\n                        boxShadow: 'none',\n                        transition: 'color 0.15s',\n                    }}\n                    onMouseOver={e => e.currentTarget.style.color = 'var(--hacker-text-accent)'}\n                    onMouseOut={e => e.currentTarget.style.color = 'var(--hacker-text-secondary)'}\n                    title=\"Reset all settings to default values and clear local storage\"\n                >\n                    Reset All Settings\n                </button>\n            </div>\n\n            {/* Auto Refresh Controls */}\n            <div className=\"d-flex flex-wrap align-items-center gap-3 mb-3 \" style={{\n                borderTop: '1px solid var(--hacker-border)',\n                paddingTop: '1rem'\n            }}>\n                <div className=\"d-flex align-items-center\">\n                    <input\n                        className=\"form-check-input\"\n                        type=\"checkbox\"\n                        checked={dynamic}\n                        onChange={toggleDynamic}\n                        style={{\n                            backgroundColor: 'var(--hacker-surface)',\n                            borderColor: 'var(--hacker-border)',\n                            accentColor: 'var(--hacker-text-accent)'\n                        }}\n                    />\n                    <label className=\"form-check-label ms-2\" style={{\n                        color: 'var(--hacker-text-secondary)',\n                        fontSize: '0.85rem',\n                        fontWeight: '600'\n                    }}>\n                        Auto refresh every:\n                    </label>\n                </div>\n                <div className=\"d-flex gap-3\">\n                    <div className=\"d-flex align-items-center\">\n                        <input\n                            className=\"form-check-input\"\n                            type=\"radio\"\n                            name=\"dynamicOptions\"\n                            value={REFRESH_INTERVALS.FAST}\n                            checked={optionAChecked}\n                            onChange={handleDynamicOptions}\n                            style={{\n                                backgroundColor: 'var(--hacker-surface)',\n                                borderColor: 'var(--hacker-border)',\n                                accentColor: 'var(--hacker-text-accent)'\n                            }}\n                        />\n                        <label className=\"form-check-label ms-1\" style={{\n                            color: 'var(--hacker-text-secondary)',\n                            fontSize: '0.8rem',\n                            fontWeight: '600'\n                        }}>5s</label>\n                    </div>\n                    <div className=\"d-flex align-items-center\">\n                        <input\n                            className=\"form-check-input\"\n                            type=\"radio\"\n                            name=\"dynamicOptions\"\n                            value={REFRESH_INTERVALS.MEDIUM}\n                            checked={optionBChecked}\n                            onChange={handleDynamicOptions}\n                            style={{\n                                backgroundColor: 'var(--hacker-surface)',\n                                borderColor: 'var(--hacker-border)',\n                                accentColor: 'var(--hacker-text-accent)'\n                            }}\n                        />\n                        <label className=\"form-check-label ms-1\" style={{\n                            color: 'var(--hacker-text-secondary)',\n                            fontSize: '0.8rem',\n                            fontWeight: '600'\n                        }}>10s</label>\n                    </div>\n                    <div className=\"d-flex align-items-center\">\n                        <input\n                            className=\"form-check-input\"\n                            type=\"radio\"\n                            name=\"dynamicOptions\"\n                            value={REFRESH_INTERVALS.SLOW}\n                            checked={optionCChecked}\n                            onChange={handleDynamicOptions}\n                            style={{\n                                backgroundColor: 'var(--hacker-surface)',\n                                borderColor: 'var(--hacker-border)',\n                                accentColor: 'var(--hacker-text-accent)'\n                            }}\n                        />\n                        <label className=\"form-check-label ms-1\" style={{\n                            color: 'var(--hacker-text-secondary)',\n                            fontSize: '0.8rem',\n                            fontWeight: '600'\n                        }}>60s</label>\n                    </div>\n                </div>\n            </div>\n\n            {/* Display Controls */}\n            <div className=\"d-flex flex-wrap align-items-center gap-3 mb-3 \" style={{\n                borderTop: '1px solid var(--hacker-border)',\n                paddingTop: '1rem'\n            }}>\n                <div className=\"d-flex align-items-center gap-2\">\n                    {/* Hidden count badge - now first, neutral style */}\n                    <span style={{\n                        color: 'var(--hacker-text-secondary)',\n                        fontSize: '0.85rem',\n                        fontWeight: '600',\n                        letterSpacing: '0.01em',\n                        lineHeight: '1.3'\n                    }}>Machines Hidden:</span>\n                    <span className=\"hacker-badge ms-0\" style={{\n                        fontSize: '0.8rem',\n                        padding: '0.18rem 0.7rem',\n                        background: 'var(--hacker-surface)',\n                        color: 'var(--hacker-text-secondary)',\n                        border: '1px solid var(--hacker-border)',\n                        fontWeight: 600,\n                        letterSpacing: '0.01em',\n                        boxShadow: 'none',\n                        marginRight: '0.5rem'\n                    }}>\n                        {hiddenMachineIds.length}\n                    </span>\n                    {/* Subtle, modern buttons */}\n                    <button\n                        className=\"hacker-badge\"\n                        style={{\n                            fontSize: '0.85rem',\n                            fontWeight: 600,\n                            padding: '0.3rem 0.8rem',\n                            border: 'none',\n                            background: 'none',\n                            color: 'var(--hacker-text-secondary)',\n                            cursor: 'pointer',\n                            boxShadow: 'none',\n                            transition: 'color 0.15s',\n                            marginRight: '0.2rem',\n                        }}\n                        onClick={handleHideOfflineMachines}\n                        onMouseOver={e => e.currentTarget.style.color = 'var(--hacker-text-accent)'}\n                        onMouseOut={e => e.currentTarget.style.color = 'var(--hacker-text-secondary)'}\n                    >\n                        Hide offline\n                    </button>\n                    <button\n                        className=\"hacker-badge\"\n                        style={{\n                            fontSize: '0.85rem',\n                            fontWeight: 600,\n                            padding: '0.3rem 0.8rem',\n                            border: 'none',\n                            background: 'none',\n                            color: 'var(--hacker-text-secondary)',\n                            cursor: 'pointer',\n                            boxShadow: 'none',\n                            transition: 'color 0.15s',\n                        }}\n                        onClick={handleShowAllMachines}\n                        onMouseOver={e => e.currentTarget.style.color = 'var(--hacker-text-accent)'}\n                        onMouseOut={e => e.currentTarget.style.color = 'var(--hacker-text-secondary)'}\n                    >\n                        Show all\n                    </button>\n                </div>\n            </div>\n        </div>\n    );\n\n    const renderMainDashboard = () => (\n        <div className=\"hacker-container fade-in\">\n            <header className=\"mb-3\">\n                <h1 className=\"mb-1\" style={{\n                    color: 'var(--hacker-text-accent)',\n                    fontSize: '2.2rem',\n                    fontWeight: '800',\n                    textShadow: '0 0 10px var(--hacker-text-accent)',\n                    letterSpacing: '0.08em',\n                    lineHeight: '1.2'\n                }}>\n                    MXStatus\n                </h1>\n                <p className=\"mb-0\" style={{\n                    color: 'var(--hacker-text-secondary)',\n                    fontSize: '0.85rem',\n                    fontWeight: '600',\n                    lineHeight: '1.4',\n                    letterSpacing: '0.015em'\n                }}>\n                    Last updated: {new Date().toLocaleString(LOCALE_CONFIG.locale, LOCALE_CONFIG.options)}\n                </p>\n            </header>\n\n            {renderControlCenter()}\n\n            <hr style={{ borderColor: 'var(--hacker-border)', margin: '1.5rem 0' }} />\n\n            {error ? (\n                <ErrorMessage error={error} onRetry={getData} />\n            ) : (\n                <>\n                    <div className=\"servers-grid\">\n                        {\n                            filteredMachines.map((data, index) => {\n                                return <MachineCard data={data} key={data.machine_id || index} onHide={() => hideMachine(data.machine_id)} />\n                            })\n                        }\n                    </div>\n\n                    {filteredMachines.length === 0 && dataSnapshot.length === 0 && (\n                        <div className=\"hacker-card\" style={{\n                            textAlign: 'center',\n                            padding: '2rem',\n                            color: 'var(--hacker-text-secondary)'\n                        }}>\n                            <p style={{\n                                margin: '0',\n                                fontSize: '1rem',\n                                fontWeight: '600',\n                                lineHeight: '1.5',\n                                letterSpacing: '0.015em'\n                            }}>\n                                No data available. Please check your view key or try refreshing.\n                            </p>\n                        </div>\n                    )}\n\n                    {filteredMachines.length === 0 && dataSnapshot.length > 0 && (\n                        <div className=\"hacker-card\" style={{\n                            textAlign: 'center',\n                            padding: '2rem',\n                            color: 'var(--hacker-text-secondary)'\n                        }}>\n                            <p style={{\n                                margin: '0',\n                                fontSize: '1rem',\n                                fontWeight: '600',\n                                lineHeight: '1.5',\n                                letterSpacing: '0.015em'\n                            }}>\n                                No machines to show.\n                            </p>\n                        </div>\n                    )}\n                </>\n            )}\n        </div>\n    );\n\n    // ========================================================================\n    // MAIN RENDER\n    // ========================================================================\n\n    return (\n        <>\n            {!showContent ? (\n                <LoadingAnimation />\n            ) : viewKey === \"\" ? (\n                renderWelcomePage()\n            ) : (\n                renderMainDashboard()\n            )}\n        </>\n    )\n}\n\nexport default PageMain\n","import React from 'react'\n\nconst Footer = () => {\n\n    const currentYear = new Date().getFullYear();\n\n    return (\n        <footer style={{\n            marginTop: '3rem',\n            padding: '1.5rem 0',\n            borderTop: '1px solid var(--hacker-border)',\n            textAlign: 'center',\n            color: 'var(--hacker-text-secondary)',\n            fontSize: '0.9rem',\n            fontFamily: 'var(--hacker-font-mono)',\n            background: 'rgba(0, 20, 0, 0.02)'\n        }}>\n            <p style={{ margin: '0', lineHeight: '1.6' }}>\n                <a\n                    href=\"https://github.com/mxshell/MXStatus-web\"\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                    style={{\n                        color: 'var(--hacker-text-secondary)',\n                        textDecoration: 'none',\n                        borderBottom: '1px solid transparent',\n                        transition: 'all 0.2s ease',\n                        padding: '2px 0'\n                    }}\n                    onMouseEnter={(e) => {\n                        e.target.style.color = 'var(--hacker-primary, #00ff41)';\n                        e.target.style.borderBottomColor = 'var(--hacker-primary, #00ff41)';\n                    }}\n                    onMouseLeave={(e) => {\n                        e.target.style.color = 'var(--hacker-text-secondary)';\n                        e.target.style.borderBottomColor = 'transparent';\n                    }}\n                >\n                    MXStatus\n                </a>\n                {' '} © {currentYear}. All rights reserved.\n            </p>\n        </footer>\n    )\n}\n\nexport default Footer\n","import './App.css';\nimport PageMain from \"./components/PageMain\"\nimport Footer from \"./components/Footer\"\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <PageMain />\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}